{"version":3,"sources":["src/types.ts","src/image-loader.ts","src/objects/conveyors.ts","src/levels.ts","src/state.ts","src/utils/stringTo.ts","src/view.ts","src/controller.ts"],"names":[],"mappings":"cGAA;;;;;AHSA,IAAY,SAAZ;AGPA,AEFA,ACAA,IHEA,AEFA,ACAA,KHEA,EEFA,ACAA,GDAA,ACAA,ODAA,ACAA,CDAA,ACAA,SAAA,CDAA,ACAA,CDAA;AFEA,AHOA,CAAA,UAAY,SAAZ,EAAqB;AGPrB,AHQC,AKRY,ACDb,ENSC,EMTD,GDCa,CAAA,GLQZ,CGRD,AHQC,MMTD,GNSC,AMTD,CNSC,GKRY,CLQZ,CAAA,CKRgC,ACDjC,CAAA,CNSC,CAAA,CAAA,GAAA,GKRiC,CLQjC,GKRgC,EAAa,CCD9C,CAAA;AHQC,AHEA,AKRA,ELQA,QKRO,CFMP,AHEA,CAAA,EKRA,EFMA,CAAY,IAAZ,AHEA,CAAA,CGF0B,KAA1B,AHEA,CAAA,CGFgD,EHEhD,CAAA,CAAA,EGFA,CHEA,CGFuE,KHEvE,MGFA,EAA0F;AACzF,AHED,AKRC,ACFF,ENUC,EMVD,KHQO,AENA,ELQN,CAAA,CGFC,AENA,CCFF,EHQc,CGRd,GHQE,CHED,CAAA,EMVD,CAAA,GNUC,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,AMVD,CAAA;AHSE,AHED,AKRE,ELQF,OGFM,EHEN,CAAA,CKRS,OAAA,CFMR,AHED,AKRS,CLQT,EGFqB,KAApB,AHED,CAAA,AKRS,CAAU,ELQnB,AKRE,CLQF,CAAA,GAAA,OAAA;ACbD,AEYE,ACZF,AJcC,AMTD,CNIA,EAAY,CCTZ,AGAA,AEKA,KHOO,ECZP,CJSqB,CMJrB,CFLA,CJSY,GCTZ,GAAA,AGAA,CAAA,AJSY,CGGV,AHHU,GGGY,KCZxB,CDYE,ACZF,AJSY,ICTZ,CAAA,ADSY,OCTZ,ADSY,CCTZ,ADSY,SAAA,GAAS,EAAT,CAAZ,QCTA,CAAA,CAAA;AEaE,AEPA,ACDF,SHQO,AEPA,MAAL,KFOA,GAAmB,WAAnB;AFZF,AEcE,ACdF,AJeA,AKTG,ACFH,ILJA,AGAA,AJeY,KGDL,EFdP,CKIA,CNWA,AKTU,CJNV,CGAA,GAAA,ECMU,CFQR,AERQ,GFQY,CCdtB,CDcE,ACdF,GHAA,CAAA,AIMU,CAAU,IAAjB,EJNH,CAAA,SGAA,CAAA,cHAA,CAAA,CAAA;AEeE,AGJD,SHIM,EGJN,GHIC,GAAa,EAAb,CGJD,CAAY,SAAZ,EAAgC;ALVjC,AEeE,ACfF,AJcA,AKRE,ACID,CNID,GCdA,AGAA,IEUC,CDJM,ELQK,CIdZ,CEUC,ELVD,AGAA,ACME,CCID,ELVD,EDcA,AMJC,ENIoB,QIdrB,CAAA,EHAA,CAAA,IGAA,CAAA,EHAA,CAAA,OGAA,CAAA,CAAA,mBHAA,CAAA,CAAA;ADeC,AKRE,ELQF,SAAA,CAAA,CKRS,OAAA,CLQT,AKRS,CLQT,MAAA,CAAA,CKRS,CAAU,CLQnB,CAAA,CAAA,CKRE,ELQF,MAAA;ACdD,AEeA,ACdA,AJcC,AMKA,ENLA,ECfD,AGCA,KDcA,AGKC,ENLA,CAAA,CCfD,CEeA,ACdA,EHDA,KDeC,CAAA,EMKA,GAAkB,ENLlB,CAAA,CCfD,CAAA,CDeC,CAAA,CAAA,EMKmB,CNLnB,CCfD,CAAA,EKoBmB,EAAgB,CNLlC,IMKkB,EAA4B,OLpB/C,CAAA,CAAA;AEDA,ACEA,AJeC,AKTC,ACcA,CHtBF,CHiBC,CGjBD,GGsBE,GDdK,ELSN,CAAA,EMKS,CAAC,CDdT,KLSD,CAAA,MMKC,CNLD,AMKwB,CNLxB,GAAA,CAAA,CAAA,GAAA,IMKC,EAAsC,CNLvC,QMKC,GAAkD,aAAa,KAAK,GAAG,CAArB,CAAlD;ACxBF,ANIA,AGAA,AJgBC,AKTE,ACcD,ENLD,EOpBD,ANIA,EKqBE,KCzBF,APoBC,CIhBD,AJgBC,CKTS,CEXV,ANIA,AKqBU,CAAC,ELrBX,GIOU,CEXV,APoBC,AKTS,CEXV,APoBC,MMKC,CAAuB,CDdf,CEXV,AFWoB,CEXpB,ANIA,CAAA,CDgBC,CAAA,CKTE,ELSF,CAAA,CChBD,ADgBC,CChBD,EDgBC,MMKC,EAA6C,INL9C,KChBD,AKqBE,CLrBF,CAAA,CKqB2D,KAAK,CAAC,WAA/D;AHLF,AC4FC,AJ3FA,AKlBA,ACuBC,ENLD,EGDK,EGMJ,IHNU,CC4FX,AJ3FA,CAAA,CGDc,CGML,CAAC,EHNQ,IC4FlB,AJ3FA,CGDc,AHCd,CGDwB,CAAV,AC4Fd,ED5F2B,CAAC,CAAD,AGM1B,CAAuB,CHNM,CAAH,EAAK,CAAL,CAAb,EAAsB,AGMnC,CHNoC,AHCrC,CGDoC,AHCpC,AMKkC,EHNK,CAAH,AHCpC,CAAA,CGDyC,AHCzC,CGDoC,CAAtB,CHCd,CGD6C,AGM5C,GAA6C,KAAK,CAAC,MNLpD,MMK8C,CAAmB,QAAnB,EHNhC,AGMb,CHNF;AInBA,ANIA,AEgBA,AC2FC,AJ1FA,AKTA,ACcC,CDzBW,CLoBZ,EOrBD,ANIA,AEgBM,EGMJ,EFqFD,EG/GD,AJoBY,CHCX,CAAA,COrBD,AJoBe,AC2Fd,CErFS,CAAC,CFqFV,CD3FkB,CFhBnB,EMJA,AH+GC,CG/GD,ANIA,ADiBC,CGDc,AHCd,CGDwB,CAAV,EAAa,CAAC,CAAD,AGM1B,CC1BF,AD0ByB,CC1BzB,AJoB+B,CAAH,EAAK,CAAL,CAAb,AHCd,CCjBD,ADiBC,CCjBD,AEgBqC,CAAC,AGMpC,CHNmC,AHCpC,CAAA,AMKmC,CHNI,AHCvC,CGDoC,EFhBrC,AEgB0C,AHCzC,CCjBD,AEgBqC,CAAtB,EAA+B,CGM5C,GAA8C,KNL/C,AMKoD,CAAC,QHNvC,CAAf,CFhBA,CAAA,CAAA,EKsBgD,CAAqB,QAArB,EAA9C;AHJF,AHAC,AMKC,ENLD,EGAK,CGAL,KHAW,CHAX,CAAA,CGAc,QHAd,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AOrBD,ANIA,AEkBC,ACnBA,AJmBA,AKTY,EFSZ,AHAA,EOtBD,ANIA,EEkBK,CETQ,CFSN,AETM,CDVZ,EJmBA,CAAA,CInBA,CGHD,EHGQ,CGHR,ANIA,GAAA,CDkBC,CGDc,AHCd,EOtBD,AFaa,CEbb,EFagC,QJThC,CAAA,CISiC,CLShC,CAAA,EKT+B,CLS/B,COtBD,ANIA,ADkBC,AKT4C,CEb7C,ANIA,ADkBC,GAAA,gBAAA,GClBD,CAAA,CAAA;AEmBC,ACnBC,AJmBD,AKTA,ACcA,EHLA,AHAA,IInBC,GEwBD,CDdO,CLSP,CAAA,CGAW,CETX,CFSa,MHAb,CInBiB,AJmBjB,EInBmB,CEwBnB,GAAmB,GFxBA,CAAA,AJmBnB,CAAA,GAAA,CAAA,CAAA,AMKoB,GFxBD,AJmBnB,CInB6B,EEwBV,EFzBZ,AEyB2B,KNLlC,wBGFc;AIpBf,ANIA,AEmBC,ACnBC,AJmBD,AKTC,ACcA,CNfF,CGUC,CHVW,CObZ,ANIA,EGAE,AEwBA,CHLI,EAAE,AETD,CFSE,CIvBT,AJuBQ,CHVa,CGUT,CIvBZ,AJuBQ,AGKE,CNfE,AKCV,ACcS,CHLI,CFnBf,AEmBQ,CAHO,EFhBf,AGAgB,CGJhB,CAAA,AHIkB,AJSN,CAAA,KMeV,CFxBgB,AEwBO,CFxBP,CGJlB,CAAA,APaY,GCTZ,CAAA,CDSY,GITM,CAAW,CAFrB,CHER,CAAA,ADSY,CAAA,GMeV,EAA4C,INflC,GAAS,EAAT,AMeV,CNfF,EMe0D,ILxB1D,CAAA,CAAA,AKwBgE,CAAC,CAAP,CAAS,QAAT,EAAxD;AHJD,ACnBC,ACUC,ACcD,EHLD,ICnBC,AEwBA,EHLK,EAAE,CAAC,CAAD,CETC,CFSG,AGKH,CHLD,AGKE,EHLK,CAAC,CAAR,CAJM,AELL,CAAA,EDVS,EAAE,GEwBnB,CAAuB,CDdf,CAAU,CDVC,CAAA,ECUlB,ODVkB,CAAU,IAHvB,CE2BN,EAA4C,SAA5C,GAAwD,MAAM,CAAC,CAAP,CAAS,QAAT,EAAxD;AC3BF,ANGA,AEoBC,ACnBC,AJyBF,AMDE,EHLD,EIvBK,ANGN,AD0BY,EGNP,ACnBH,AEwBA,EHLK,GIvBM,GAAG,AP6BhB,AMDU,CAAC,IFxBI,EAAE,CHDjB,CMHM,ENGN,GKyBE,CAAuB,CC5BT,GAAA,ONGhB,CAAA,OAAA,AKyBE,CLzBF,CKyB8C,SAA5C,GAAwD,MAAM,CAAC,CAAP,CAAS,KLzBnE,CAAA,CAAA,CKyB0D,EAAxD;AC3BD,AJiBc,AClBP,ACcN,ACeA,CHXF,IClBC,AEyBA,CCxBM,GFaA,CEbI,GAAG,GFaZ,KEboB,CAAC,cAAT,CAAwB,MAAxB,CAAb;AACA,ANED,AEsBA,ACnBC,AJsBD,AKdG,CLcH,GCzBA,AEsBM,EIxBC,GHKN,CDmBW,CIxBA,AP2BA,EGHG,AEXL,CEbK,AHKd,GAAQ,CGLU,ANEnB,CMFoB,CFaV,CJXV,ADyBA,AKdU,ELcY,EItBb,CAAA,ICQC,CAAU,CEbL,CAAmB,AHKzB,CAAO,EHHhB,AIWG,CJXH,EGGqB,IAAL,CGLf,ANED,AGG0B,CHH1B,YGGS,CAAR,UHHD,CAAA,CAAA;AMDC,AJwBA,AClBA,AJqBA,AMCA,EHJA,AHGA,IO3BM,AJwBF,EAAE,CClBN,AEsBA,GC5BY,AP2BZ,CAAA,EO3Be,CD4Bf,GC5BmB,AD4BT,CC5BU,GP2BpB,CGJc,ACjBd,AJqBA,GIrBkB,AJqBlB,CAAA,CMCW,ENDX,CAAA,AMCU,CC5BK,AP2Bf,CO3BkC,AD4BlB,ENDhB,EMCU,CNDV,CMCoB,MC5BpB;AACA,ANCD,AEuBC,ADjCD,AEeE,AJqBD,AKfC,ACiBA,EHLD,AHGA,EC1BD,ACVA,EKSO,AHML,GCMK,CEZI,AD6BN,CJtCL,CFoCC,CO3Ba,AJwBF,AHGX,AMEO,CJtCR,CCiCc,AClBH,CCMT,CDNW,AEuBD,CC7BO,GAAG,ALTtB,CAAA,CDUA,AD0BC,CAAA,EC1BD,AK4BE,CC7BY,AP2Bb,CAAA,AMEsB,EC7BQ,CP2B9B,CEpCD,AFoCC,CEpCD,AFoCC,GO3Ba,AP2Bb,EIrBY,CGN2B,AP2BvC,EC1BD,CAAA,EMDC,KNCD,CAAA,mBEqBe,SFrBf,CAAA,CAAA;AMAC,AJwBA,AClBE,AJqBF,AKfE,ACkBD,EC9BD,AJwBA,AHGA,IO3BI,CAAC,AJwBA,EAAE,CAAC,AGMD,CHNA,CIxBP,AHMK,AJqBL,CO3BW,AJwBA,AHGX,AKfS,CFYF,CGMK,CHNE,CAAP,AClBE,CDeK,ACfJ,AEwBK,CC9Bf,CFYS,CAAA,CEZW,AHMf,CAAU,AJqBf,AMGmB,CNHnB,AMGoB,EC9BI,CP2BxB,CAAA,CO3B2B,CFYlB,ACkBM,CNHf,AKfmB,ACkBQ,CNH3B,CO3BA,AP2BA,GIrBK,AJqBL,AKfE,ACkBD,GNHD,CIrBgC,QAAA,CAAA,OAAA,CAAO,MAAP,GAAgB,CAA9C,EAAgD;AGLlD,ANAD,AEwBC,ADlCD,AEgBI,AJqBH,AMGC,CNPF,COvBC,AJwBA,CHDW,CCvBZ,ACVA,EKUK,CAAC,CJwBC,EAAE,AGMD,CHNE,CIxBT,AJwBQ,CIxBG,APuBU,CGCT,CAAJ,CHDG,AMOE,CHNE,CIxBf,AJwBQ,ADlCT,CC8Be,AGUE,EC9BG,ALVpB,EFiCY,CCvBZ,ADuBY,AMOS,CC9BG,AD8BF,EL9BtB,CMAyB,ALVzB,CAAA,EKUoB,AD8BH,CAAY,EC9BE,APuBnB,IOvBX,AD8BC,CNPU,GCvBZ,CAAA,GCVA,AFiCY,CEjCZ,AFiCY,GCvBZ,CAAA,MDuBY,GAAU,EAAV,CAAZ,iBCvBA,CAAA,CAAA;AEyBC,AClBG,ACKF,ACoBA,EHPD,IAAI,AGOH,EHPK,CEbA,ECoBD,CAAC,GAAL,CAAS,KDpBT,ICoBA,GAAqB,SAArB;AC9BD,ANDD,AEmBe,AD5Bf,AGqBG,ACoBD,CHbF,GFnBA,EMCI,GLVY,CIyCR,CC/BC,EFWC,ACoBC,CC/BC,ED+BE,IC/BI,AFWR,CAAA,EEXS,CLVnB,CAAgC,CKU/B,CNDD,CMCuB,CLVvB,CDSA,AIYU,ACoBI,CJzCmC,AGqB7B,ACoBN,SJzCd,CGqBG,CHrBoE,AIyCzD,EAAZ,CLhCF,CAAA,OAAA,ACTA,CDSA,CCTgG,MAAhG,EAAsG,uBDStG,CAAA,CAAA;AMEE,AJyBF,ADnCC,AEeE,AE0BD,IC/BA,AJyBI,IIzBA,AHKH,CGLI,CJyBK,ADnCJ,AIyCA,GHNO,ACpBR,CGLL,ALVD,AEeO,CGLK,CD+BC,EF1BX,CAAU,AE0BI,EC/Bf,GAAoB,MAAM,EHKzB,CGL4B,AD+Bd,CAAA,EF1Ba,CGL5B,AHKC,WE0Bc,CAAe,GAAG,CAAC,KAAnB,CAAf;AC9BA,ANFF,AE2BC,ADnCC,AGoBA,EFeD,EIzBC,ANFF,EE2BK,EIzBC,AJyBC,CIzBA,ALVA,AGoBA,EJZP,GMEE,ANFF,CMEa,CLVN,CAAA,GKUL,CNFF,CAAA,CMEqB,GLVd,AGoBL,CHpBe,EKUU,CJwBZ,CF1Bf,ACRE,CKU0B,ANF5B,GMEqB,GAAa,IAAhC;AACA,AJyBD,ADnCE,AEcA,ACMA,ACoBD,EHLD,IGKC,EF1BC,GE0BG,CAAC,CHLK,ADnCF,AEcH,ACMG,CDNF,CDqBM,AGKZ,CAAS,CJxCG,GGoBJ,CHpBA,AGoBA,CHpBS,GIwCjB,CACC,GF3BA,AE0BD,CF1BsB,ACMd,CHpBA,AGoBU,ACsBjB,CJ1CA,II0CK,GAAC,CHTM,CCnBZ,EE4BA,EDtBA,CCsBW,GAAG,CAAC,CAFhB,EAEmB,MAAM,GAAC,IAAP,GAAY,GAAG,CAAC,CAFnC,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB;AL/BF,AE2BC,ACrBE,EDqBF,EF3BK,GE2BA,AC5Ba,ED4BX,CAAC,CAAD,EF3BO,AE2BH,CAAJ,EF3BU,AE2BH,CAAC,CAAR,CAHO,MFxBT,SAAY,CAAC,GAAD,EAAY;AME7B,ANDA,AE2BA,ADpCC,AEgBA,ACIA,ACwBA,EHRD,II1BG,ANDG,AGOL,AE4BA,EHRK,CF3BG,ACTH,AGoBA,CFgBE,CAAC,AGQJ,CClCI,ANDG,AE2BJ,AGQF,EHRM,CI1BF,AJ0BF,ACpBE,AE4BT,CLnCe,ACTV,AI4CI,CHRK,ADpCT,AEgBM,CGNT,AJ0Ba,CAAR,CAJM,CItBE,ANDJ,EAAZ,AIWC,ECwBA,CClCD,ALVM,AI6CJ,CJ7Cc,CKUO,ILVtB,AI6CO,CAAC,IADR,CF5BW,CE8BV,KAAK,GAAC,IAAN,GAAW,GAAG,CAAC,CAFhB,EAEmB,MAAM,GAAC,IAAP,GAAY,GAAG,CAAC,CAFnC,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB;ACjCA,ANDD,AE2BA,ADpCE,AEgBA,ACIA,EJXF,AE2BA,EI1BC,CNDE,CAAC,AE2BA,EI1BC,AJ0BC,CI1BA,ANDN,GAAU,AGOL,CFhBI,AGoBA,CEVR,CAAW,ANDZ,ECTa,AEgBJ,CAAC,ECID,CEVR,AFUQ,CHpBA,AEgBJ,CFhBc,AEgBJ,CGNM,KAAK,CFUjB,CAAU,CEVQ,ALVlB,CKUY,ALVnB,GKU2B,AHMxB,CGNgB,GAAY,AHMD,CAA9B,CCIA,CDJgC,CGNjC;AACA,ANDD,AEqBc,ACdX,AE+BF,CHjBF,GIpBE,EDqCA,ECrCI,CAAC,ANDC,EKsCF,CLtCL,AKsCM,ECrCL,CAAW,ADqCX,CAAS,ICrCT,GAAmB,EDqCnB,CACC,ECtCuB,GAAG,CDsCpB,CAAC,ECtCR,EDqCA,EAEC,KAAK,GAAC,IAAN,GAAW,GAAG,CAAC,CAFhB,EAEmB,MAAM,GAAC,IAAP,GAAY,GAAG,CAAC,CAFnC,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB;ACpCA,ANDD,AE4BD,ADtCE,AEiBE,ACGF,CJdF,GEgCM,KDtCC,AGoBA,CFkBK,GAAG,GDtCR,CAAA,SAAA,CAAU,CGoBf,IHpBA;AKYD,AJ2BA,ADtCE,AGoBA,AC+BD,CCxDF,CJ2CC,IAAI,EAAE,EGaF,GJnDK,AGoBA,GC+BC,CJnDG,AImDF,GD/BF,CAAA,CHpBA,CAAU,IImDlB,EAAqB,CD/Bb,CAAU,CHpBV,CAAP,cGoBA,IFiBY;AF1BF,AE4BZ,ACtBE,AEmCA,EHbF,KF5BY,CAAA,AGMV,IEmCM,CHbG,ACtBL,CAAC,CDsBM,CF5BD,CKyCC,CFnCX,CHNqB,AGMX,CEmCI,SLzCQ,GGMtB,EEmCc,CAAA,CFnCa,CAA3B,CHNqB,EAAuB,IAAvB,EAAsC,EKyC7C,EAAd,gBHfY;AIxBf,ANDC,AE4BA,ADvCC,AGoBA,EFmBD,EI3BD,ENDK,CE4BC,EAAE,ADvCD,AGoBA,CFmBE,CAAD,EAAI,CI3BZ,AJ2BQ,CF5BP,CE4Bc,ADvCR,CCuCC,ADvCD,ECuCW,CAAC,CAAX,EAAc,CAAC,CAAf,CAHO,ADpCR,AGoBL,CHpBe,UAAf;AKYF,AJ4BC,ADvCE,AEgBA,ACIA,AC+BA,EHZF,MAAM,ACvBJ,AEmCA,EHZM,CAAC,CAAD,CDvCC,AEgBH,ACIG,AC+BH,CHZM,ACvBL,AEmCA,CHZC,EAAO,ADvCF,AImDX,CHZM,AGYG,EHZO,AEnBT,CFmBU,AEnBV,CFmBD,EAAc,CAAC,CAAf,CAJM,ADnCL,AImDP,CJnDsB,AIoDrB,CFpCD,CAAqB,ACId,CAAU,EC+BjB,EAEC,EJrDM,CAAP,EIqDM,CFrCN,EEqCO,EDjCP,ECiCC,GAAW,GAAG,CAAC,CAFhB,EAEmB,MAAM,GAAC,IAAP,GAAY,GAAG,CAAC,CAFnC,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB;ACxCH,ANCC,AE4BA,ACvBE,AEsCA,EHfF,IAAI,CCtCc,CDsCZ,EF5BC,EMDR,ENCC;AMGA,ANFC,AEsBa,ADlCb,AEkBA,ACEA,ACmCA,CHrBF,IGXC,CFLC,GHNK,ACZA,AGoBA,EENN,KNFM,ACZA,CDYA,ACZA,AEkBM,EAAE,ACEb,EEND,GAAA,ENFM,ACZA,CDYU,ACZA,IDYf,UCZA,CEkBa;AGJd,ANDE,AE6BH,ADzCG,AEkBA,ACEA,IFqBG,II5BL,AHKE,EDuBS,GI5BX,ANDS,AE6BK,ADzCL,AEkBH,ACEG,CDFF,EGLP,CLba,EDYE,AGMb,CGLF,ANDgB,AIQP,CAAA,CDFM,EHNb,MGMa,ACEN,CHpBA,AEkBM,ACEI,CHpBS,MEkBb,CAAO,ACEpB,EHpBO,EAA8B,CEkBb,CAAC,IAAL,CAAU,IFlBvB,EAA2C,MAA3C,CAAP,AEkBa,CAAb;ADwBF,ACvBE,ACjBF,ACsDA,EHdA,IAAI,EAAE,CGcN,SAAA,GAAY,UHfE,AGeD,IAAD,EAA2B,IAA3B,EAAuC;ACTnD,ANlCC,AE8BD,AD1CC,AEDiB,ACsBlB,ACmCC,CDxDW,CF0CZ,GC3CA,IG+CA,ANlCM,ACZA,CIwDC,GHdI,EAAE,AGcD,CL5CN,ACZA,CK8CN,ANlCM,ACZA,CIwDS,ECVJ,GDUQ,CAAC,EL5Cd,ACZA,CDYU,ACZA,GIwDD,CAAY,IL5C1B,CK4CA,EJxDA,eCwCa;AIOb,ANlCC,AE8BF,AD1CE,AEsBF,AEkCC,EHdD,KAAK,EAAE,CAAC,AGcD,CHdA,EF9BE,AE8BE,AD1CF,CC0CF,EAAO,AGcD,CHdN,AD1CM,CCuCC,CF3BC,AK4CC,CL5CA,IK4CI,CAAC,GL5CnB,ACZO,CAAgB,EIwDT,CAAY,MJxDnB,AIwDR,EJxDmC,WAA3B,EAAwC,MAAxC,CAAP;AK+CD,AJJD,EAAA,IIIC,EJJK,EAAE,CAAC,CAAD,CIIA,CJJI,CIIF,AJJF,EAAO,CAAP,CAJM,KIMH;AAGV,ANnCA,AE+BD,AD3CC,AIyDA,EHdD,IIIC,AJJG,EAAE,CF/BA,ACZA,EIyDD,ICVK,ADUD,CL7CH,ACZA,AIyDI,CCVE,ANnCN,ACZA,EIyDO,CAAZ,ECbU,ADaK,CAAC,GL7CX,ACZA,AIyDc,CL7CJ,ACZA,GIyDQ,CAAC,CL7CxB,KK6CA,EAAgC,CAAC,EAAjC,CJzDA,CIyDoC;ACTpC,ANnCC,AEyBY,ADrCZ,AIyDA,CHpBH,KIUE,ANnCC,MMmCK,CL/CE,AIyDH,CCVG,CNnCE,ECZE,AIyDH,CL7CI,AK6CH,GAAG,CAAZ,EL7CkB,AK6CH,CL7CI,AK6CH,GAAG,EL7CnB,EMmCO,ADUgB,CJzDhB,AIyDiB,CJzDI,KIyD5B,EAAgC,CAAC,CJzD1B,CIyDP,CJzDuC,CIyDH,UJzD7B,EAA6C,MAA7C,CAAP;AKgDA,ANnCA,AEgCH,AGaI,IHbE,MAAM,GAAY,CACvB,AGYS,MHbc,EAEvB,AGWiB,GAAG,GHbG,CAAxB,AGayB,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAjB;ACTD,AJCH,ADjDE,AI2DE,OHVJ,CAAA,CDjDO,GKgDD,EDWI,CHVV,CDjDO,CKgDG,ALhDH,AI2DM,CCXF,AJCI,EGUC,GCXV,CAAW,AJCjB,EDjDO,CKgDD,ALhDW,IKgDO,GDWR,CAAA,KCXb,CLhDD,CKgDgC,CDWlB,CACX,QAAQ,CAAC,SADE,EAEX,QAAQ,CAAC,IAFE,CAAZ;ACVA,ANpCF,ACZC,SDYI,CMoCH,GLhDM,EKgDF,CAAC,ANpCF,CAAA,ACZO,IKgDV,CAAW,GAAX,CNpCG,CAAU,CMoCI,GLhDX,CDYR,ACZ2B,SAAnB,EAA8B,WAA9B,EAA2C,MAA3C,CAAP;AKiDE,ANpCF,AKkDC,MLlDD,IKkDC,ECdC,CAAC,EAAE,ANpCI,AKkDJ,CCfa,ADeZ,ELlDM,CKkDX,CAAS,ILlDQ,CAAC,IKkDlB,CLlDD,AKmDE,GADD,EAEC,KAAK,GAAC,IAAN,GAAW,CAFZ,EAEe,MAAM,GAAC,IAAP,GAAY,CAF3B,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB,EARmC,CAYlC;ACjBA,ANpCF,ACbD,SAAK,GKiDF,CAAC,EAAE,CAFa,AL/Cd,CAAA,SAAA,CAAU,QAAf;AKkDG,ALjDF,YKiDE,CLjDK,IKiDA,ALjDI,EKiDF,KAAI,CAAC,ALjDP,CAAa,IKiDX,CAAW,ILjDb,CKiDE,ALjDT,CKiD0B,KAAjB,CAAuB,KAAvB,EAHS;AAIhB,ANrCH,AGaD,AEyCG,SLtDG,AGaN,GGwBI,AHxBJ,EEyCM,CFzCA,CHbA,CAAA,GMqCM,EAAE,ADiBA,CAAC,GLtDT,CAAU,OKsDV,GLtDL,CKsD6B,SAA3B,EAAsC;ACrBrB,ANhClB,ACbD,AE0BA,AEyCG,MLtDF,AGaD,CAAC,EAAE,CADE,CGoBH,INhCQ,CKsDD,ELtDI,IKsDE,ELtDI,CAAC,AKsDF,ULtDjB,IKsDiB,CAAA,cAAA,CAAe,QAAQ,CAAC,WAAxB,CAAf;AChBD,ANrCD,ACbA,AE0BD,MAAA,CAAC,EGiBA,AHjBE,CAFE,GFxBG,EKkDA,ELlDI,IAAJ,CAAS,SAAT,CAAP;AKmDC,ALvEH,AE+CC,AEwCG,MFxCH,KAAK,CEwCF,CFxCI,CGwBC,AH3BH,CG2BI,EDgBF,CChBK,ADgBJ,GAAL,CAAS,CChBI,CAAC,KAAL,CAAW,CDgBpB,CACC,CCjBQ,CAAe,CAAzB,GDgBC,EAEC,KAAK,GAAC,IAAN,GAAW,CAFZ,EAEe,MAAM,GAAC,IAAP,GAAY,CAF3B,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB;ACfD,ANtCF,ACZD,AE0BC,AE2CG,MF3CH,GHdK,KMsCG,AHxBA,CGwBC,CNtCJ,AGcK,CHdL,CMsCO,KAAI,CAAC,ENtCZ,CAAU,EMsCH,CAAW,GAAX,CAAe,CAAzB,MNtCF;AACC,AGSI,KAAN,CHTE,SAAS,GAAG,MAAM,CAAC,MAAnB;AMuCC,ANtCD,ACrCH,AEoDC,AEwCI,OJ5FL,CAAA,CEoDC,CGuBG,KAAI,CAAC,KAAL,CAAW,AHvBd,CFpDD,EEoDiB,CFpDjB,CK2EI,AHvBH,CGuBoB,IAAjB,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EL3EhC,IK2EI,CAAmC,KAAI,CAAC,KAAL,CAAW,GAA9C;AACA,AHpBH,AEqCG,SFrCH,KAAA,GAAQ;AHlBP,ACbF,AEgCE,AEqCC,IJrEH,EEgCE,EFhCF,CDaO,GGmBC,EAAE,EHnBH,CAAA,SAAA,CAAU,WAAf;AMwCC,ANvCA,ACdH,AEiCG,AEqCD,KA5BD,CL5BE,EGmBA,CAAC,EAAE,CGoBA,AHrBI,GHlBE,EMuCF,CAAC,ANvCI,KMuCT,CAAW,ANvCI,CAAC,EMuChB,CAAe,ENvClB,MMuCA,EAA2B;AAC1B,ANvCD,ACfH,AEkCG,QAAA,CAAC,EAAE,CFlCN,AEgCU;AGuBN,ALpDH,AEgCE,AEqCF,QFrCE,CAAC,AEqCH,CCjBG,CLpDH,AEgCK,IGoBE,ALpDP,CKoDQ,ALpDI,KKoDT,CAAW,GLpDd,AIqEA,ECjBG,ALpD6B,CKoDZ,ADiBD,YCjBhB,ADiBgB,CCjBc,IAA9B,CAAmC,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,KAAlD;ANvCF,ACED,AEcS,AEyCR,OF1CO,EHfF,ACEN,IAAA,GDFM,ACEC,CDFD,MCEC,CAAA,EDFD,CAAU,MCET,CAAU,IAAjB,KDFC;AMwCE,ANvCD,ACbD,AEkCA,AEoCA,MLzDC,AGqBD,AEoCA,GJtEK,CKoDH,CDkBE,CAAC,GClBC,ANvCI,CMuCH,CHlBI,CHrBE,ACbb,AIsEA,CFpCa,AEoCD,EClBV,ALpDe,CKoDJ,ENvCM,CMuCjB,ANvCkB,GMuCD,ELpDnB,CIsEA,CAAyB,GLzDxB,EMuCC,GDkBF,EFpCa,AEoCsB,KAAnC;ACjBE,ANvCD,ACbD,AEkCC,QAAA,KAAI,CAAC,KAAL,CAAW,MAAX,CAAkB,CAAlB,GAAsB,CAAtB;AACA,AEmCD,MAAA,EFnCC,GEmCG,CAAC,CFnCA,CAAC,IEmCN,CFnCC,AEmCW,CFnCA,MAAX,CAAkB,CAAlB,GAAsB,AEmCvB,CFnCC,AEmCwB,OAAzB,EAAkC,KAAlC;AChBC,ANxCD,ACbD,AEmCE,EFnCF,IAAA,CAAA,CEmCE,CHtBI,GMwCD,CHlBC,CAAC,EHtBD,ACbN,CKqDS,ANxCH,ACbN,CKqDU,CHlBR,CAAW,GFnCb,GKqDK,ANxCC,ACbN,AEmCE,CGkBiB,ANxCH,AGsBI,CAAlB,GAAsB,CAAtB,IFnCK,GAAP,EDaC,ACbc,CAAI,CAAnB,IKqDK,EAAH,EAAyC;AACxC,ANxCD,AGsBA,AEkCD,MLxDC,AKwDD,CF7CO,GG6BL,CDgBE,CAAC,GChBC,ANxCI,CMwCH,ENxCM,KKwDb,CChBE,ANxCiB,CMwCH,ANxCI,IMwClB,WNxCD;AACA,ACfiB,AEsClB,AEiCA,KALD,CF5BC,IAAI,EAAE,EAbC;AG8BL,ANjEH,AGkDC,MAAA,IGeE,MHfQ,CGeD,CAAC,AHfE,GGeV,CAAY,QAAZ,QHfW,IAAD,EAAa;AGgBvB,ALvDH,AEwCE,AEgCF,EJxEA,IAAA,CAAA,EIwEA,GFhCQ,IFxCR,AEwCY,CFxCZ,EEwCe,CEgCf,CJxEA,EIwEc,CJxEd,AEwCoB,CAAC,IAAD,CAAL,CAAY,GFxCtB,CEwCU,AEgCD,CFhCkB,CFxChC,EACE,KADF,CEwCe,CFvCE,CEwCd,GADY,CACR,CFzCP,EACiC,IADjC,EAEE,CAFF,EAEa,AEuCN,CFzCP,EAEsB;AKsDnB,ANvCH,ACbC,AEqCU,AEgCV,MAAA,EJrEI,EDaE,CCbC,AIqEH,CAAC,EJrEK,CIqEV,CAAS,CFhCC,EHxBX,GGwBgB,CAAC,EEgChB,EFhCe,CFrCL,AEqCA,AEgCW,CJrEX,AEqCY,IAAZ,CAAiB,GFrCjB,AIqEV,CJrEmB,KAAK,AEqCd,CAAA,QFrCA,EAAyB,KAAK,IAA9B,CAAV;ADcA,ACZA,AEmCqC,IFnCrC,GAAG,CAAC,CDYC,AGsBS,CAAb,MHtBI,CAAA,ACZL,CACC,GADD,EAEC,GDUI,CAAU,CCVT,CDUN,ECVO,IAAN,GAAW,CAFZ,EAEe,MAAM,GAAC,IAAP,GAAY,CAF3B,EAGC,KAAK,GAAC,IAHP,EAGa,MAAM,GAAC,IAHpB;AKoDC,ANvCA,ACTD,AEiCC,AE+BD,GJ1ED,GI0EC,EF/BC,GE+BG,CChBA,ADgBC,CLvDG,AGwBH,CAAC,CE+BN,CAAS,CChBD,CAAC,CHfR,CAAW,EHxBK,CMuCb,ANvCc,CMuCH,AHfd,AE+BD,CLvDC,AKuDiB,CAAlB,CF/BmB,CE+BC,CChBhB,ADgBJ,CChBqB,CHfE,AE+BD,CF/BE,GAAL,CAAS,AE+BF,CAAC,KChBvB,CAA8B,ADgBZ,CAAY,EF/BL,GGezB,AHfwB,AE+B5B,EF/BgC,AE+BS,GChBI,EDgBA,CAAC,EChBG,CAAC,GDgBT,CAAY,CChBR,CAAW,IDgBxD,CChB6C,CAAiB,cAAjB,CAAgC,MAA5E,EAAoF;AACnF,AHhBmC,AEgCrC,KAHD,KCbG,KAAI,CAAC,CHhB+B,GAAG,CAAC,GGgBxC,AHhBoC,CGgBtB,AHhB8B,IGgB5C,QHhB4C;AHvB9C,ACRF,AE+BsD,SHvB/C,ACRP,IAAA,GDQO,CAAA,EGwBH,OHxBG,CAAU,GGwBb,CHxBF,AGwBE,eAAA,CACC,OAAA,CAAA,SAAA,CAAU,IADX,EAEC,OAAA,CAAA,SAAA,CAAU,EAFX,EAGC,SAHD,EAIC,SAJD,CADkD;AGiBlD,ANvCD,AC5BH,AEyDK,AE2BJ,CJpFD,EAAA,MIoFC,CCjBG,CHjBoC,CAAD,CHtB7B,IMuCC,CAAC,GAAR,CAAY,ANvCG,CAAC,IAAjB,MMuCC,EAFmF,CAGnF,CDgBH,GAA+B,UAAC,OAAD,EAA0B;AF3BnD,AE4BL,SFnCmB,CAAlB,AEmCK,OAAO,GAAG,QAAQ,CAAC,gBAAT,CAA0B,mBAA1B,CAAhB;AChBE,ANxCF,AC7BW,AE0DV,AE4BD,MAAA,CJtFW,AE+BJ,CF/BI,CD6BN,GC7BM,CIsFJ,CAAC,CJtFG,CD6BN,CAAA,EC7BM,EIsFX,CAAgB,ILzDX,CAAU,IAAf,CKyDiB,MAAD,EAAyB;AChBvC,ANxCD,AG8BD,AE2BC,MF3BD,EE2BC,KLzDO,CKyDD,CF3BE,AE2BD,EF3BG,GE2BV,CAAa,CLzDG,CAAC,IAAjB,KKyDA,GAA2B,GF3BjB,ME2BV;AJlEH,AEwCG,AE2BA,IJnEH,GIiEE,CFzBC,IFxCH,CEwCO,CAAC,KAAL,CAAW,UAAX,CAAsB,KAAI,CAAC,KAAL,CAAW,IAAjC;AGWA,ANzCD,ACVF,AIoEE,MAAA,ECjBC,CNzCI,IMyCA,ADiBE,CCjBD,ADiBE,EL1DH,CAAA,EK0DL,CAAc,ECjBb,CAAc,GNzCV,CMyCJ,ANzCc,IK0Df,CL1DA,EK0D4B,SAA5B;AChBC,ANzCA,ACXH,AEyCG,AE4BD,KAND,ECnDW,CH6BT,EFzCH,GDWU,AG8BH,CAAC,EFzCR,EAAA,CEyCG,CAAW,EH9BK,CAAC,CG8BjB,CAAgB,CAAhB,EH9BA,AG8BmB,CAAnB,IAAwB,WAAA,CAAA,eAAA,CACvB,OAAA,CAAA,SAAA,CAAU,KADa,EAEvB,OAAA,CAAA,SAAA,CAAU,IAFa,EAGvB,SAHuB,EAIvB,SAJuB,CAAxB;AGaD,ANnDD,ACH6B,AE+C3B,EF/C2B,IKsD5B,CH5CO,GG4CH,CLtDwB,CKsDtB,ALtDsB,QAAA,EAAA,MKsDtB,ALtDsB,CAAA;AKuD3B,AN1CF,AGoCC,AEsBD,CLnGY,KG6EX,EGMC,CDgBF,IChBM,CAAC,EHNI,EGMT,AHNW,CGMD,ODgBZ,GAAoB,CChBlB,QHNY,CAAD,AEsBQ,EFtBI,CAAZ,EAAqB,IEsBd,EAAqB;AJvE1C,AEkDG,AEsBD,MAAA,EFtBC,GFlDH,AIwEM,CAAC,CFtBA,CAAC,KFlDR,AEkDG,CAAW,EFlDd,EEkDG,CAAgB,CAAhB,EAAmB,CAAnB,IAAwB,KEsBzB,CAAgC,KFtBP,CAAA,GEsBzB,YFtByB,CACvB,KAAI,CAAC,IAAL,CAAU,gBADa,EAEvB,KAAI,CAAC,IAAL,CAAU,iBAFa,EAGvB,KAAI,CAAC,IAAL,CAAU,cAHa,EAIvB,KAAI,CAAC,KAAL,CAAW,MAJY,CAAxB;AGMA,ANzCU,ACfb,AEwDG,OHzCU,CMyCV,ANzCU,ACfb,KKwDO,ALxDP,CKwDQ,ELxDR,EKwDG,CAAU,ANzCA,GAAc,ACf3B,KAAA,CKwDG,CAAoB,ELxDvB,GKwD2B,ANzCA,CMyCC,ALxD5B,KKwDuB,CAAW,ALxDlC,CAAA,IKwDuB,CAAiB,ALxDxC,CAAA,GKwDG,CLxDH,CKwD8C,CLxD9C,IKwDkD,CAAC,ILxDnD,CKwD8C,ALxD9C,CKwDyD,GLxDzD,EKwD8C,CAAiB,CLxD/D,GKwDG;ANxCF,AGNQ,AEgEP,KFhED,CEgEC,GL1DM,EK0DF,CAAC,GL1DO,CAAC,GAAd,SK0DC,CAAsB,OAAtB,CAA8B,UAAC,OAAD,EAA0B;ACjBvD,ANxCF,AChBA,AE0DA,AEgBE,CL5DU,GCdZ,IKwDE,CLxDF,AE0DA,CF1DA,EI0EM,CClBA,CAAC,ALxDP,GAAO,CKwDL,CAAU,AHEZ,EEgBe,CFhBM,CAArB,CF1DO,AI0EW,CJ1EX,CKwDL,CAAkB,KAAI,CAAC,ADkBvB,CJ1EK,CAAU,GKwDG,CAAW,GAA7B,CLxDF,CKwDoC,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,IAAnD;AHGF,SAAA,SAAA,GAAqB,KAArB;AGFE,ANvCU,ACdZ,AE2DC,AEYC,OLzDU,CMuCV,ANvCU,CG6CN,IGNA,CAAC,AHMN,CAAW,CEYH,EClBP,CAAU,GNvCA,CKyDI,CFZf,AEYgB,CLzDY,CKyD3B,SClBA,ANvC4B,CMuCD,ENvCA,EAAY,CMuCR,CAAC,KAAL,CAAW,KAAX,CAAiB,MAA5C;AACA,ANvCF,AG6CC,AEYE,MLzDC,CMRO,EHqDL,GAAL,GAAW,AEYJ,CLzDM,GAAG,AKyDd,KLzDH,AG6CC;AGJA,ANxCD,ACnBA,AEgEC,AEYG,EJ5EJ,IK2DC,ANxCG,GAAG,CCnBP,CAAA,CDmBU,AKyDN,ILzDU,CAAC,GAAL,ACnBV,CDmBmB,ACnBnB,AI4Ea,GLzDH,AKyDM,CLzDhB,CMwCqB,CL3DrB,CK2DuB,EL3DvB,CI4EgB,CAAA,QJ5ET,CI4ES,CAAU,CJ5E1B,CI4EI,CJ5EW,eK2DQ;AACrB,AL3DD,AI4EG,IJ5EH,GAAG,CAAC,QAAJ,GAAe,IAAf;AK4DC,ANxCF,ACnBC,AEwIF,GF1IC,GDqBG,GAAG,AGqHP,GG7ES,ANxCC,CAAT,EAAY,IGqHb,IG7EoB,GAAG,CAAC,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,YAAjB,CAA8B,KAA9B,CAAoC,UAAC,KAAD,EAAQ,KAAR,EAAa;AAAK,ANvC5E,AGrEF,AE6HI,CF7HJ,EAAA,CHqEE,UAAU,CKwDH,EChBL,ANxCW,IAAb,AKwDE,CChBK,KAAK,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,cAAjB,CAAgC,KAAhC,CADgE;AAE1E,ANxCF,ACpBF,AI4EK,GL9DqC,CAQzC,KMoCuB,AL1DxB,CK0DG,EDkBE,KJ5EL,II4Ec,GAAG,OAAA,CAAA,SAAA,CAAU,IAAtB;AJjFL,AE7Ca,AE+HR,CJlFL,CAA8B,IAA9B,CAAA,AE7Ca,CAAA,UAAA,GAAA,UAAA;AGgHV,YAAG,KAAI,CAAC,KAAL,CAAW,GAAX,KAAmB,SAAtB,EAAiC;AAChC,ANxCH,AC5BY,AImFT,MLvDG,CC5BM,CAAA,OD4BG,AKuDP,CJnFI,CKoEF,CNxCQ,CC5BN,ED4BS,AKuDlB,GLvDqB,GAAxB,AC5BY,CKoET;AACA,ANxCH,AKuDI,MLvDE,IAAI,EKuDN,CLvDS,QKuDA,CLvDS,EKuDN,CLvDS,EAAzB,IKuDgB,CAAA,SAAA,CAAU,IAAtB;ALtDJ,ACvBD,AI8EK,IJ9EL,EDuBO,GCvBP,CDuBW,GAAG,IAAI,CAAC,KAAL,CAAW,SAAS,GAAC,EAArB,CAAb,CAXyC,CAazC;AMuCE,ALhEH,YKgES,OAAO,GACZ,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,CAAf,GAAmB,CAAnB,IACA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,CAAf,GAAmB,CADnB,IAEA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,CAAf,IAAoB,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,IAFrC,IAGA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,CAAf,IAAoB,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,IAJtC,CAVqB,CAiBrB;AN7CF,AC1BD,AI+EI,MLrDG,IC1BP,ID0Be,CKqDN,CJ/ET,CD0BkB,CC1BlB,GD0BsB,CKqDlB,GLrDsB,CAAR,GAAY,EAAZ,GAAe,IAAI,GAAG,EAAP,GAAY,CAA5C;AM+CE,AN7CF,AC5B0B,AIgFtB,EJhFsB,OD4BnB,EC5BmB,CAAA,AIgFtB,GCPK,ELzEiB,EAAA,EIgFb,CCPX,EDOc,CJhFU,CAAA,KIgFV,CAAA,SAAA,CAAU,KAAtB;ACNF,AN7CD,AKoDG,ILpDH,GMxBU,CNwBN,EAAE,MAAM,CAAC,OAAP,CAAe,IAAf,CADA;AMgDN,AN9CA,AC5BD,AImEE,ILvCD,EM8CA,EN9CI,EAAE,CM8CD,AL1EN,EK0EQ,GN9CK,AC5Bb,CD4Bc,AC5BF,OD4BL,CAAe,CC5BtB,EAAgC,EK0ExB,GN9CD,CAFA;AMiDL,AN9CD,AC7BD,ID6BC,IC7BD,IK2EK,CL3EL,CD6BW,EAAE,AC5BZ,CK0EQ,CAAC,IL1ET,CAAA,GK0EI,CAAc,AL1ElB,CAAA,IAAA,EAAM,EK0EL,EAA4B,KL1E7B,KAAgB,IADjB;AK4EE,ANlDK,AKuDL,GLvDF,KMkDE,IDKM,CCLF,CAAC,QAAL,CAAc,ADKG,GAAG,MCLpB,GAA0B,IAA1B,CDKoB,CAAA,QAAA,CAAS,SAAT,EAAmB,OAAA,CAAA,SAAA,CAAU,KAA7B,EAAoC,GAAxD;ACJA,AN9CF,AChCA,AImFE,CLxEU,GCXZ,IK8EE,ADKA,CJnFF,CAAA,GK8EM,CAAC,AL9EP,CImFS,CAAC,CJnFH,EK8EL,CAAW,IL9EN,CK8EL,AL9EK,CK8EY,EDKjB,CAAqB,ECLrB,GAAsB,AL9EjB,AImFL,CJnFe,CImFa,IJnF9B,OImFE,CCLsB,CAAO,KAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,YAAxB,CAAtB;AACA,ADKA,OAlBD,CCaC,KAAI,CAAC,QAAL,CAAc,OAAd,GAAwB,WAAW,CAAC,KAAI,CAAC,QAAL,CAAc,MAAf,EAAuB,GAAvB,CAAnC;AACA,AN9CU,AC/BX,OKCU,AN8BC,CAAA,aAAA,GAAgB,YAAA;AMgD3B,ANhDiC,AKoDhC,MCJD,ADIC,GLpDiC,CMgD9B,EAAE,EDIG,CLpD+B,AKoD9B,CLpD+B,KAAR,OMgD3B,ADIL,CAAuB,OAAvB,EAAqD,KAArD,CAA2D,WAA3D,GAAyE,SAAzE;ACHA,ANjD8C,AC7BhD,CD6BY,CC7BZ,KAAA,CK8EE,AL9EF,KK8EM,CAAC,GL9EP,CAAA,IK8EE,CAAc,CL9EhB,GAAA,KK8EE,GAA0B,EL9ErB,GK8EL,AL9EF,EAAe;AK+Eb,AL9ED,AIkFA,MAAA,ECJC,GDIG,CJlFG,AIkFF,KJlFO,IK8EE,CAAC,CDIf,CAAiB,EJlFjB,CK8EmB,CAAC,GDIpB,CAAyB,ICJV,CAAc,KDIH,ECJZ,CAAb,IDIwB,EAA0B;ACFlD,ANlDU,AC7BV,AIkFA,OLrDU,CMkDV,ANlDU,AKqDV,GJlFK,EK+ED,CAAC,CDGE,CAAC,EJlFH,CK+EL,AL/EK,CK+EM,ENlDD,CMkDV,ENlD2B,CMkDV,CDGjB,CJlFK,CAAU,CIkFO,IJlFtB,CK+EA,ANlD4B,GAAD,EAAgB,AKqDpB,CAAD,EAAE;ALpD1B,AC7BG,AIkFA,QJlFA,ED6BI,AKqDJ,CJlFG,AIkFF,CJlFG,AIkFF,CLrDL,AC7BG,aIkFA;ACHD,ANjDD,AC7BE,AIkFA,QCJD,CNjDI,AKmDJ,ICFI,CAAC,ENjDD,CAAA,EMiDJ,CAAW,KAAX,CAAiB,CNjDb,CAAW,CAAhB,QMiDC;ANhDA,AKqDA,OAJD,MLjDQ,MAAM,CAAC,OAAP,CAAe,CAAtB;AMiDA,AL9EA,AImFD,KA9BD,GCyBE,GL9EK,EK8ED,CAAC,IL9EA,CK8EL,AL9EK,CK8EM,KAAX,CAAiB,EL9EZ,CAAU,IAAf,KK8EA,GAAgC,EAAhC;ANhDD,AC7BE,QAAA,CD6BG,EC7BA,CAAC,CAAJ,GD6BG,CAAA,UAAA,CAAW,CAAhB;AMkDC,ANjDA,AC7BC,AImFH,QCLE,CDKF,ICLM,ANjDG,CMiDF,KNjDQ,CAAC,EMiDd,CAAc,IAAd,ANjDO,CAAe,CAAtB,MKsDF,GAA6B,UAAC,SAAD,EAAqB;ACJhD,ADKD,MAAA,KAAI,CAAC,eAAL,CAAqB,OAArB,CAA6B,UAAC,OAAD,EAA0B;AC5F7C,ANsCV,AC7BC,AIoFA,KC7FF,INsCM,EC7BC,CIoFC,ILvDF,CAAA,CC7BC,CAAA,IIoFY,GAAG,CLvDhB,CAAW,AC7BV,CD6BN,AC7BgB,IAAf,OIoFoB,CAAA,QAAA,CAAS,SAAT,EAAoB,UAAA,CAAA,gBAAA,CAAiB,OAAO,CAAC,YAAR,CAAqB,IAArB,CAAjB,CAApB,EAAkE,GAAtF;ALtDA,AC7BC,AIoFD,QJpFC,AIoFD,GJpFI,CAAC,CD6BE,AC7BN,EIoFM,CAAC,GLvDK,CAAC,OAAP,CAAe,AKuDtB,CLvDA,AKuDqB,KAArB,EAA4B,WAA5B;ACJF,ANzDA,ACtBG,AIoFD,OAHD,ECFD,gBAAA,GAAmB,UAAC,CAAD,EAAc;AAChC,ADKA,KALD,CCAC,KAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,SAA3B;ANjDD,AC9BE,SD8BK,EC9BA,OD8BP,AC9BO,CAAA,SAAA,CAAU,EAAf;AKgFD,ANjDD,AC9BG,AI7DF,CLgFW,KM4DX,EL/EE,CI7DG,EC4ID,AL/EC,CK+EA,AL/EC,CAAJ,EI7DF,CC4IA,CAAU,CD5II,QAAQ,CAAC,KC4IvB,CAA0B,KAAI,CAAC,CD5IjB,CAAuB,GC4IX,CAAW,IAAX,CAAgB,AD5I5B,CAAd,YC4IA,EAAyD,KAAI,CAAC,KAAL,CAAW,KAApE;AL9EE,AI7DF,SAAK,GAAL,GAAW,KAAK,MAAL,CAAY,UAAZ,CAAuB,IAAvB,CAAX;AC4IA,AN/CF,AC5CE,AIhDA,IL4FI,EM+CJ,GD3IK,CL4FK,GM+CH,AN/CM,CM+CL,GAAR,CAAY,MAAZ,CD3IA;AC4IA,AN/CD,AC/BC,AI5DA,EL2FD,CC9CA,EKyFA,IN3CO,AK3FD,EL2FG,MAAM,CAAC,EK3Ff,EL2FQ,CAAY,AK3FD,OL2FC,CAAA,AK3FO,CAAC,ML2FpB,EAAqB,GAArB,CAAyB,IK3Fd,CAA0B,KL2FX,GAAD,EAAI,KK3FlB,CAAnB;AL2F0C,AK1F1C,SAAK,EL0FsC,SAAS,CAAC,GK1FrD,GAAuB,CL0F8B,CAAA,MK1FtB,CL0FsB,AK1FrB,CL0F6B,GAAR,CAAD,CAAV,UK1FnB,CAA0B,mBAA1B,CAAvB;AC2ID,ANjDoE,AC9BrE,AI3DE,GLyFQ,CADK,KMkDd,AL/ED,AI3DO,KJ2DP,WK+EC,AD1IC,GC0IkB,AD1IM,QAAQ,CAAC,CC0Id,CAAD,EAAc,YD1IR,CAA0B,oBAA1B,CAAxB;AC2IA,ANjDD,ACrDD,AIpCE,CJoCF,CDqDC,ACrD0B,IKsGzB,ALtGF,CDqDM,ACrDN,EDqDQ,AKzFD,EC0ID,CAAC,KAAL,CAAW,ANjDI,CAAC,OKzFhB,CAAuB,GLyFP,CAAA,EMiDhB,CAA2B,ED1I3B,ELyFe,CAFF,IMmDb;ANhDD,AKzFC,ELyFD,GAAG,EAAE,SAAS,CAAC,SAAA,CAAA,OAAD,CAHA;AMoDb,ANhDD,ACvDY,EDuDZ,IMgDC,ANhDG,CCvDQ,CDuDN,ACvDM,GKuGP,CAAC,CLvGM,GKuGX,ALvGW,CKuGD,ANhDI,CAAC,GCvDJ,ODuDI,CAAA,GMgDf,CAA0B,GNhDZ,CAJD,CMoDiB,CAAC,KAAL,CAAW,IAAX,CAAgB,aAA1C,EAAyD,KAAI,CAAC,KAAL,CAAW,KAApE;AACA,ANhDD,AK8CD,EL9CC,GM6CA,IDCD,CL9CS,EAAE,MK8CX,GL9CoB,CAAC,cAAA,CAAA,OAAD,CALL;AAMd,ACjCD,AI3EA,CAAA,CL4GC,CK5GD,CJ2EA,GDiCM,EAAE,ACjCR;AKkFC,ANhDC,AClCF,IDkCE,EAAE,EAAE,CMgDL,QNhDc,CAAC,YMgDf,CNhDe,CAAA,CMgDS,MNhDT,CAAM,EAAP,CMgDW,ANjDlB,CMiDiB,EAAc;AACrC,ANhDA,ACnCF,AI3Ea,IL8GX,GK9GW,CL8GP,AK9GO,EC8JL,ANhDA,ACnCR,MAAA,CKmFe,AD9JF,CJ2Eb,CDmCiB,CMgDE,ANhDD,AK9GL,CC8JO,CAAC,MAAnB,CD9JW,IL8GK,CAAA,OAAA,CAAM,IAAP,CAFT;AMmDN,ANhDA,ACpCyB,EAAA,EDoCzB,EMgDA,ENhDI,EAAE,CMgDF,ALpFqB,CKoFpB,ALpFoB,KKoFzB,ALpFyB,CKoFd,CNhDI,ACpCU,CDoCT,EMgDhB,CAAgB,ELpFS,CAAA,ODoCT,CAAA,KMgDhB,ENhDgB,CMgDmB,ANhDb,IAAP,CAHT,KMmD6B,CAAA,gBAAA,CAAiB,OAAO,CAAC,EAAzB,CAAnC;AN/CA,IAAA,KAAK,EAAE,SAAS,CAAC,aAAA,CAAA,OAAA,CAAM,KAAP;AMgDhB,ANpDM,AC/BP,GDyBc,GM0Db,KAAI,ALnFL,CKmFM,IAAL,ALnFD,CKmFW,ALnFC,SAAZ,EAAgC,iBKmF/B,CAAuC,OAAvC;AACA,AN/CD,ACrCA,EDqCA,GM2CA,EN3CK,CCrCL,CDqCO,ICrCP,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,KAAgB,IADjB;ADsCC,IAAA,EAAE,EAAE,SAAS,CAAC,aAAA,CAAA,OAAA,CAAM,EAAP,CADP;AMiDP,AN/CC,ACxCD,IDwCC,ACxCD,IDwCK,CM+CL,ALvFA,CDwCO,ACxCP,IAAA,GAAO,EDwCS,CAAC,ICxCV,CAAA,MKuFP,EN/CiB,CM+CQ,AN/CR,ACxCV,CAAU,KAAjB,CDwCiB,CAAM,EM+CG,CAAD,CN/CT,CM+CuB,ANjDhC;AMkDN,AN/CA,IAAA,IAAI,EM+CE,AN/CA,OM+CO,EN/CE,CM+CE,AN/CD,CM+CE,CAAC,MAAnB,KN/CgB,CAAA,OAAA,CAAM,IAAP,CAHT;AMmDN,AN/CA,ACvCA,IDuCA,EM+CA,GN/CK,EM+CD,AN/CG,CM+CF,KAAL,CAAW,EN/CK,CAAC,CM+CjB,CAAgB,WN/CC,CAAA,KM+CjB,EN/CiB,CM+CmB,AN/Cb,KAAP,KM+CoB,CAAA,iBAAA,CAAkB,OAAO,CAAC,E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","file":"controller.ac99eadd.js","sourceRoot":"..","sourcesContent":["import { Board } from \"./objects/board\";\n\nexport interface Box {\n\tx: number,\n\ty: number,\n\tvalue: number,\n\treturned: boolean\n}\n\nexport enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nexport enum Conveyors {\n\tBase,\n\tMover,\n\tAdder,\n\tSubtractor,\n\tMemoryAssigner,\n\tMemoryAdder,\n\tMemorySubtractor,\n\tMemorySplitter,\n\tReturner\n}\n\nexport interface Memory {\n\tA: number;\n\tB: number;\n\tC: number;\n}\n\nexport enum MemoryType {\n\tA,\n\tB,\n\tC\n}\n\nexport interface State {\n\tselectedConveyor: Conveyors;\n\tselectedMemory: MemoryType;\n\tselectedDirection: Direction;\n\tboardState: Board;\n\tlevel: Level;\n\tisRunning: boolean;\n\tupdate: () => void;\n\tstart: () => void;\n\treset: (won?:boolean) => void;\n\tnextLevel: () => void;\n\tprevLevel: () => void;\n}\n\nexport interface Level {\n\tsize: number;\n\tinitialInput: Array<number>;\n\tinput: Array<number>;\n\texpectedOutput: Array<number>;\n\tactualOutput: Array<number>;\n\tdescription: string;\n}","import borders from './images/*_border.png';\nimport numbers from './images/numbers/*.png';\nimport minus from './images/numbers/minus.png';\nimport box from './images/box.png';\nimport base from './images/base.png';\nimport returner from './images/returner.png';\nimport mover from './images/*_mover.png';\nimport adder from './images/*_adder.png';\nimport subtractor from './images/*_subtractor.png';\nimport memory from './images/*_memory.png';\nimport memory_adder from './images/*_memory_plus.png';\nimport memory_subtractor from './images/*_memory_minus.png';\nimport memory_splitter from './images/*_memory_splitter.png';\nimport { Direction, Conveyors, MemoryType } from './types';\n\nconst loadImage = (src: string) => {\n\tconst img = new Image();\n\timg.src = src;\n\treturn img;\n}\n\nexport const getImage = (direction: Direction, type: Conveyors) => {\n\tlet imageType;\n\n\tswitch(type){\n\t\tcase Conveyors.Base:\n\t\t\treturn images.base;\n\t\tcase Conveyors.Returner:\n\t\t\treturn images.returner;\n\t\tcase Conveyors.Mover:\n\t\t\timageType = images.mover;\n\t\t\tbreak;\n\t\tcase Conveyors.Adder:\n\t\t\timageType = images.adder;\n\t\t\tbreak;\n\t\tcase Conveyors.Subtractor:\n\t\t\timageType = images.subtractor;\n\t\t\tbreak;\n\t\tcase Conveyors.MemoryAssigner:\n\t\t\timageType = images.memory;\n\t\t\tbreak;\n\t\tcase Conveyors.MemoryAdder:\n\t\t\timageType = images.adder;\n\t\t\tbreak;\n\t\tcase Conveyors.MemorySubtractor:\n\t\t\timageType = images.subtractor;\n\t\t\tbreak;\n\t\tcase Conveyors.MemorySplitter:\n\t\t\timageType = images.memory_splitter;\n\t\t\tbreak;\n\t}\n\n\tswitch(direction){\n\t\tcase Direction.Up:\n\t\t\treturn imageType.up;\n\t\tcase Direction.Down:\n\t\t\treturn imageType.down;\n\t\tcase Direction.Left:\n\t\t\treturn imageType.left;\n\t\tcase Direction.Right:\n\t\t\treturn imageType.right;\n\t}\n}\n\nexport const getBoxImage = () => {\n\treturn images.box;\n}\n\nexport const getNumberImage = (num: number) => {\n\tvar isNegative = false;\n\tvar abs = Math.abs(num);\n\n\tif(num < 0) {\n\t\tisNegative = true;\n\t}\n\n\t// Numbers must be from 0-99\n\tconst truncated = abs % 100;\n\tconst ones = truncated % 10;\n\tconst tens = Math.floor(truncated/10);\n\t\n\t// Magic, fix pls\n\tconst realTens = tens == 0 ? 19:tens + 10 - 1;\n\n\treturn {\n\t\tones: images.numbers[ones],\n\t\ttens: images.numbers[realTens],\n\t\tisNegative: isNegative\n\t};\n}\n\nexport const getMinusImage = () => (images.minus);\n\nexport const getBorderImage = (mem: MemoryType) => {\n\tswitch(mem){\n\t\tcase MemoryType.A:\n\t\t\treturn images.borders.A;\n\t\tcase MemoryType.B:\n\t\t\treturn images.borders.B;\n\t\tcase MemoryType.C:\n\t\t\treturn images.borders.C;\n\t}\n\n\treturn undefined;\n}\n\n\nconst images = {\n\tnumbers: Object.keys(numbers).map((key) => (loadImage(numbers[key]))),\n\tminus: loadImage(minus),\n\tbox: loadImage(box),\n\tbase: loadImage(base),\n\treturner: loadImage(returner),\n\tmover: {\n\t\tup: loadImage(mover.up),\n\t\tdown: loadImage(mover.down),\n\t\tleft: loadImage(mover.left),\n\t\tright: loadImage(mover.right),\n\t},\n\tadder: {\n\t\tup: loadImage(adder.up),\n\t\tdown: loadImage(adder.down),\n\t\tleft: loadImage(adder.left),\n\t\tright: loadImage(adder.right),\n\t},\n\tsubtractor: {\n\t\tup: loadImage(subtractor.up),\n\t\tdown: loadImage(subtractor.down),\n\t\tleft: loadImage(subtractor.left),\n\t\tright: loadImage(subtractor.right),\n\t},\n\tmemory: {\n\t\tup: loadImage(memory.up),\n\t\tdown: loadImage(memory.down),\n\t\tleft: loadImage(memory.left),\n\t\tright: loadImage(memory.right),\n\t},\n\tmemory_adder: {\n\t\tup: loadImage(memory_adder.up),\n\t\tdown: loadImage(memory_adder.down),\n\t\tleft: loadImage(memory_adder.left),\n\t\tright: loadImage(memory_adder.right),\n\t},\n\tmemory_subtractor: {\n\t\tup: loadImage(memory_subtractor.up),\n\t\tdown: loadImage(memory_subtractor.down),\n\t\tleft: loadImage(memory_subtractor.left),\n\t\tright: loadImage(memory_subtractor.right),\n\t},\n\tmemory_splitter: {\n\t\tup: loadImage(memory_splitter.up),\n\t\tdown: loadImage(memory_splitter.down),\n\t\tleft: loadImage(memory_splitter.left),\n\t\tright: loadImage(memory_splitter.right),\n\t},\n\tborders: {\n\t\tA: loadImage(borders.green),\n\t\tB: loadImage(borders.red),\n\t\tC: loadImage(borders.blue),\n\t},\n}","import {Direction, Conveyors, MemoryType, Memory, Box} from '../types';\nimport { getImage } from '../image-loader';\n\nexport function ConveyorFactory(type: Conveyors, direction: Direction, memory_type: MemoryType, memory) {\n\tswitch(type){\n\t\tcase Conveyors.Base:\n\t\t\treturn new Base(direction);\n\t\tcase Conveyors.Mover:\n\t\t\treturn new Mover(direction);\n\t\tcase Conveyors.Adder:\n\t\t\treturn new Adder(direction);\n\t\tcase Conveyors.Subtractor:\n\t\t\treturn new Subtractor(direction);\n\t\tcase Conveyors.MemoryAssigner:\n\t\t\treturn new MemoryAssigner(direction, memory_type, memory)\n\t\tcase Conveyors.MemoryAdder:\n\t\t\treturn new MemoryAdder(direction, memory_type, memory)\n\t\tcase Conveyors.MemorySubtractor:\n\t\t\treturn new MemorySubtractor(direction, memory_type, memory)\n\t\tcase Conveyors.MemorySplitter:\n\t\t\treturn new MemorySplitter(direction, memory_type, memory)\n\t\tcase Conveyors.Returner:\n\t\t\treturn new Returner(direction)\n\t\tdefault:\n\t\t\treturn new Base(direction);\n\t}\n}\n\nexport class Base {\n\tdirection: Direction;\n\tmemory_type: MemoryType;\n\tconstructor(direction: Direction){\n\t\tthis.direction = direction;\n\t}\n\tupdate(box: Box) {};\n\tdraw(ctx: CanvasRenderingContext2D, \n\t\t\twidth: number, height: number, size: number,\n\t\t\tx: number, y: number) {\n\n\t\tlet img = getImage(this.direction, this.type);\n\n\t\tctx.drawImage(\n\t\t\timg,\n\t\t\twidth/size*x, height/size*y,\n\t\t\twidth/size, height/size);\n\t}\n\ttype = Conveyors.Base;\n}\n\nexport class Returner extends Base {\n\ttype = Conveyors.Returner;\n\tupdate(box: Box) {\n\t\tbox.returned = true;\n\t}\n}\n\nexport class Mover extends Base {\n\ttype = Conveyors.Mover;\n\tconstructor(direction: Direction){\n\t\tsuper(direction);\n\t}\n\n\tupdate(box: Box) {\n\t\tswitch(this.direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class Adder extends Mover {\n\ttype = Conveyors.Adder;\n\tconstructor(direction: Direction) {\n\t\tsuper(direction);\n\t}\n\n\tupdate(box: Box) {\n\t\tsuper.update(box);\n\t\tbox.value++;\n\t}\n}\n\nexport class Subtractor extends Mover {\n\ttype = Conveyors.Subtractor;\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tbox.value--;\n\t}\n}\n\nexport class MemoryAssigner extends Mover {\n\ttype = Conveyors.MemoryAssigner;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A = box.value;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B = box.value;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C = box.value;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class MemoryAdder extends Mover {\n\ttype = Conveyors.MemoryAdder;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A++;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B++;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C++;\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n}\n\nexport class MemorySubtractor extends Mover {\n\ttype = Conveyors.MemorySubtractor;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tconsole.log(this.memory)\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A--;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B--;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class MemorySplitter extends Mover {\n\ttype = Conveyors.MemorySplitter;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tSplitter(box, this.direction, this.memory.A);\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tSplitter(box, this.direction, this.memory.B);\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tSplitter(box, this.direction, this.memory.C);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction Splitter(box: Box, direction: Direction, value: number){\n\tif(value > 0){\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t}\n\t// If value < 0, go to the left\n\t} else if (value < 0){\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t}\n\t// If value == 0, follow direction\n\t} else {\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}","//import { Level } from \"./types\";\n\nclass Level {\n\tsize: number;\n\tinitialInput: Array<number>;\n\tinput: Array<number>;\n\texpectedOutput: Array<number>;\n\tactualOutput: Array<number>;\n\tdescription: string;\n\tconstructor(size: number, input: Array<number>, output: Array<number>, description: string){\n\t\tthis.size = size;\n\t\tthis.initialInput = input;\n\t\tthis.expectedOutput = output;\n\t\tthis.description = description;\n\n\t\tthis.actualOutput = [];\n\t\tthis.input = [];\n\t}\n}\n\nconst level1 = new Level(3, [0,0,0], [0,0,0], \"Get the boys up in there buddy\");\nconst level2 = new Level(3, [0,0,0], [1,1,1], \"Add em up fellas\");\n\nconst level3 = {\n\tname: \"Take it away\",\n\tdescription: \"Subtract three from each input using the subtract-conveyor\",\n\tinput: [3, 8, 0],\n\toutput: [0, 5, -3],\n\tsize: 3,\n}\n\nconst level4 = {\n\tname: \"Null null null\",\n\tdescription: \"Turn the input into zeroes using the memory-conveyor\",\n\tinput: [3, 8, 0],\n\toutput: [0, 0, 0],\n\tsize: 5,\n}\n\nconst level5 = {\n\tname: \"Two and a half boxes\",\n\tdescription: \"Divide the input by two\",\n\tinput: [2, 6, -4],\n\toutput: [1, 3, -2],\n\tsize: 5,\n}\n\nconst level6 = {\n\tname: \"Two and a half boxes 2: Electric boogaloo\",\n\tdescription: \"Divide the input by two, round up for odd numbers\",\n\tinput: [2, 3, 7, -3, -4],\n\toutput: [1, 2, 4, -2, -2],\n\tsize: 7,\n}\n\nconst level7 = {\n\tname: \"Remember the last one\",\n\tdescription: \"Add the previous output to the input\",\n\tinput: [1, 1, 1],\n\toutput: [1, 2, 3],\n\tsize: 5,\n}\n\nconst levels: Level[] = [\n\tlevel1,\n\tlevel2,\n]\n\nexport default levels;","import { Conveyors, Direction, State, Level, MemoryType } from './types';\nimport {Base, ConveyorFactory} from './objects/conveyors'\nimport levels from './levels';\n\nexport class StateClass {\n\tmenu = {\n\t\tselectedConveyor: Conveyors.Base,\n\t\tselectedMemory: MemoryType.A,\n\t\tselectedDirection: Direction.Down,\n\t\tselectedLevel: 0,\n\t}\n\n\tlevel = levels[this.menu.selectedLevel];\n\n\tlevelOperations = {\n\t\tnextLevel: () => {\n\t\t\tif(this.menu.selectedLevel == levels.length - 1){\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.menu.selectedLevel += 1;\n\t\t\tthis.levelOperations.updateLevel();\n\t\t},\n\n\t\tprevLevel: () => {\n\t\t\tif(this.menu.selectedLevel == 0){\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.menu.selectedLevel -= 1;\n\t\t\tthis.levelOperations.updateLevel();\n\t\t},\n\n\t\tupdateLevel: () => {\n\t\t\tthis.level = levels[this.menu.selectedLevel]\n\t\t}\n\t}\n\n\n\n\t/*\n\tlevel = {\n\t\tsize: 3,\n\t\tinitialInput: [0,0,0],\n\t\tinput: [],\n\t\texpectedOutput: [1,1,1],\n\t\tactualOutput: []\n\t}\n\t*/\n\n\tbox = {\n\t\tx: 0,\n\t\ty: 0,\n\t\tvalue: 0,\n\t\treturned: false\n\t}\n\n\tboxOperations = {\n\n\t}\n\n\tboard = {\n\t\tmemory: {\n\t\t\tA: 0,\n\t\t\tB: 0,\n\t\t\tC: 0\n\t\t},\n\n\t\tresetMemory: () => {\n\t\t\tthis.board.memory.A = 0;\n\t\t\tthis.board.memory.B = 0;\n\t\t\tthis.board.memory.C = 0;\n\t\t},\n\n\t\tgrid: [],\n\n\t\tcreateGrid: (size: number) => {\n\t\t\tconst grid = Array(size).fill(undefined)\n\t\t\t.map(()=>Array(size).fill(undefined))\n\n\t\t\tthis.board.grid = grid.map((row) => (row.map(() => (\n\t\t\t\tConveyorFactory(\n\t\t\t\t\tConveyors.Base,\n\t\t\t\t\tDirection.Up,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined\n\t\t\t\t)\n\t\t\t\t))))\n\t\t},\n\n\t\tresetGrid: () => {\n\t\t\tthis.board.createGrid(this.level.size);\n\t\t\tthis.board.grid[0][0] = ConveyorFactory(\n\t\t\t\tConveyors.Mover,\n\t\t\t\tDirection.Down,\n\t\t\t\tundefined,\n\t\t\t\tundefined\n\t\t\t)\n\t\t},\n\n\t\tupdateGrid: (x: number, y: number) => {\n\t\t\tthis.board.grid[x][y] = ConveyorFactory(\n\t\t\t\tthis.menu.selectedConveyor,\n\t\t\t\tthis.menu.selectedDirection,\n\t\t\t\tthis.menu.selectedMemory,\n\t\t\t\tthis.board.memory\n\t\t\t\t);\n\t\t},\n\t}\n\n\tlevelIndex: number = 0;\n\tisRunning: boolean = false;\n\tinterval: number;\n\t\n\tconstructor() {\n\t\tthis.board.resetGrid();\n\t\tthis.box = undefined;\n\t}\n\n\t/*\n\tnextLevel = () => {\n\t\tif(this.isRunning) return;\n\t\tthis.levelIndex = this.levelIndex < levels.length-1? this.levelIndex+1:this.levelIndex;\n\t\tthis.setLevel();\n\t}\n\n\tprevLevel = () => {\n\t\tif(this.isRunning) return;\n\t\tthis.levelIndex = this.levelIndex > 0? this.levelIndex-1:this.levelIndex;\n\t\tthis.setLevel();\n\t}\n\n\tsetLevel = () => {\n\t\tthis.level = levels[this.levelIndex];\n\t\tthis.boardState = new Board(this.level.size);\n\n\t\tconst canvasSize = this.level.size * 128;\n\t\tthis.canvas.height = canvasSize;\n\t\tthis.canvas.width = canvasSize;\n\n\t\tthis.draw();\n\n\t\tdocument.getElementById(\"level_name\").innerHTML = this.level.name;\n\t\tdocument.getElementById(\"level_name\").style.color = \"black\";\n\t\tdocument.getElementById(\"level_description\").innerHTML = this.level.description;\n\t\tdocument.getElementById(\"input\").innerHTML = \"Input: \" + this.level.input.toString();\n\t\tdocument.getElementById(\"output\").innerHTML = \"Output: \" + this.level.output.toString();\n\t}\n\t*/\n\n\t/*\n\tdraw = () => {\n\t\tthis.context.fillStyle = \"#eeeeee\";\n\t\tthis.context.fillRect(0,0,this.canvas.width, this.canvas.height)\n\t\tthis.boardState.draw(this.context, this.canvas.width, this.canvas.height);\n\t\tthis.boxHandler.draw(this.context, this.canvas.width, this.canvas.height, this.boardState.size);\n\t}\n\t*/\n\n\t/*\n\tstart = () =>{\n\t\tdocument.getElementById(\"level_name\").style.color = \"black\";\n\t\tconst button = document.getElementById(\"start\");\n\t\tbutton.innerHTML = \"Stop\";\n\n\t\tthis.isRunning = true;\n\t\tthis.update();\n\t\tthis.draw();\n\n\t\tthis.interval = setInterval(() => {\n\t\t\tthis.update();\n\t\t\tthis.draw();\n\t\t}, 300);\n\t}\n\n\treset = (won: boolean = false) => {\n\t\tconst button = document.getElementById(\"start\");\n\t\tbutton.innerHTML = \"Start\";\n\n\t\tthis.boxHandler.reset(won);\n\n\t\tclearInterval(this.interval);\n\t\tthis.isRunning = false;\n\n\t\tthis.boardState.memory.A = 0;\n\t\tthis.boardState.memory.B = 0;\n\t\tthis.boardState.memory.C = 0;\n\n\t\tthis.draw();\n\t}\n\t*/\n}","import {Conveyors, Direction} from '../types';\n\nexport const stringToDirection = (name: String): Direction => {\n\tswitch(name){\n\t\tcase 'up':\n\t\t\treturn Direction.Up;\n\t\tcase 'down':\n\t\t\treturn Direction.Down;\n\t\tcase 'left':\n\t\t\treturn Direction.Left;\n\t\tcase 'right':\n\t\t\treturn Direction.Right;\n\t}\n}\n\nexport const stringToConveyor = (name: String): Conveyors => {\n\tswitch(name){\n\t\tcase 'base':\n\t\t\treturn Conveyors.Base;\n\t\tcase 'mover':\n\t\t\treturn Conveyors.Mover;\n\t\tcase 'adder':\n\t\t\treturn Conveyors.Adder;\n\t\tcase 'subtractor':\n\t\t\treturn Conveyors.Subtractor;\n\t\tcase 'memory_assigner':\n\t\t\treturn Conveyors.MemoryAssigner;\n\t\tcase 'memory_adder':\n\t\t\treturn Conveyors.MemoryAdder;\n\t\tcase 'memory_subtractor':\n\t\t\treturn Conveyors.MemorySubtractor;\n\t\tcase 'memory_splitter':\n\t\t\treturn Conveyors.MemorySplitter;\n\t\tcase 'returner':\n\t\t\treturn Conveyors.Returner;\n\t}\n}","import { Direction, Conveyors, Level, Memory } from \"./types\";\nimport {getImage, getBoxImage, getNumberImage, getMinusImage, getBorderImage} from \"./image-loader\"\nimport { stringToConveyor } from \"./utils/stringTo\";\nimport { Base } from \"./objects/conveyors\";\n\nexport class ViewClass {\n\tcanvas: HTMLCanvasElement;\n\tctx: CanvasRenderingContext2D;\n\tmenuButtons: NodeListOf<HTMLImageElement>;\n\tconveyorButtons: NodeListOf<HTMLImageElement>;\n\tdirectionButtons: NodeListOf<HTMLImageElement>;\n\n\tconstructor(direction: Direction){\n\t\tthis.canvas = document.querySelector('#canvas');\n\t\tthis.ctx = this.canvas.getContext('2d');\n\t\tthis.initializeCanvas();\n\n\t\tthis.menuButtons = document.querySelectorAll(\".menu_buttons\");\n\t\tthis.conveyorButtons = document.querySelectorAll(\".conveyor_buttons\");\n\t\tthis.directionButtons = document.querySelectorAll(\".direction_buttons\");\n\t\tthis.initializeButtons(direction);\n\t}\n\n\tupdateLevelView = (index: number, level: Level) => {\n\t\tdocument.querySelector(\"#level_name\").innerHTML = \"Level: \" + (index + 1);\n\t\tdocument.querySelector(\"#level_description\").innerHTML = level.description;\n\t\tdocument.querySelector(\"#input\").innerHTML = level.initialInput.toString();\n\t\tdocument.querySelector(\"#output\").innerHTML = level.expectedOutput.toString();\n\t}\n\n\tupdateMemoryView = (memory: Memory) => {\n\t\tdocument.querySelector(\"#memory_a_display\").innerHTML = memory.A.toString();\n\t\tdocument.querySelector(\"#memory_b_display\").innerHTML = memory.B.toString();\n\t\tdocument.querySelector(\"#memory_c_display\").innerHTML = memory.C.toString();\n\t}\n\n\tdrawBox = (box, size) => {\n\n\t\tif(box == undefined) return;\n\n\t\tconst width = this.canvas.width;\n\t\tconst height = this.canvas.height;\n\t\t\n\t\tthis.ctx.fillStyle = \"#000000\";\n\t\tconst img = getBoxImage();\n\t\tconst number = getNumberImage(box.value);\n\t\tthis.ctx.drawImage(\n\t\t\timg,\n\t\t\twidth/size*box.x, height/size*box.y,\n\t\t\twidth/size, height/size);\n\n\t\tthis.ctx.drawImage(\n\t\t\tnumber.ones,\n\t\t\twidth/size*box.x, height/size*box.y,\n\t\t\twidth/size, height/size);\n\n\t\tthis.ctx.drawImage(\n\t\t\tnumber.tens,\n\t\t\twidth/size*box.x, height/size*box.y,\n\t\t\twidth/size, height/size);\n\n\t\tif(number.isNegative){\n\t\t\tconst minus = getMinusImage();\n\t\t\tthis.ctx.drawImage(\n\t\t\t\tminus,\n\t\t\t\twidth/size*box.x, height/size*box.y,\n\t\t\t\twidth/size, height/size);\n\t\t}\n\t}\n\n\tdrawCells = (grid: Array<Array<Base>>, size: number) => {\n\t\tconst width = this.canvas.width;\n\t\tconst height = this.canvas.height;\n\n\t\tfor(var x = 0; x < grid.length; x++){\n\t\t\tfor(var y = 0; y < grid.length; y++){\n\t\t\t\tconst conveyor = grid[x][y];\n\n\t\t\t\tconst img = getImage(\n\t\t\t\t\tconveyor.direction,\n\t\t\t\t\tconveyor.type\n\t\t\t\t)\n\n\t\t\t\tthis.ctx.drawImage(\n\t\t\t\t\timg,\n\t\t\t\t\twidth/size*x, height/size*y,\n\t\t\t\t\twidth/size, height/size);\n\t\t\t\t\t// TODO: Modify to draw 0,0 as special cell\n\n\t\t\t\tif(conveyor.memory_type != undefined) {\n\t\t\t\t\tconst border = getBorderImage(conveyor.memory_type);\n\t\t\t\t\tthis.ctx.drawImage(\n\t\t\t\t\t\tborder,\n\t\t\t\t\t\twidth/size*x, height/size*y,\n\t\t\t\t\t\twidth/size, height/size);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tinitializeCanvas = () => {\n\t\t// TODO: Resize on level change\n\t\tthis.canvas.setAttribute(\"height\", \"384\")\n\t\tthis.canvas.setAttribute(\"width\", \"384\")\n\t\tthis.clearCanvas();\n\t}\n\n\tclearCanvas = () => {\n\t\tthis.ctx.fillStyle = \"#eeeeee\";\n\t\tthis.ctx.fillRect(0,0,this.canvas.width, this.canvas.height)\n\t}\n\n\tsetConveyorButtonBorderColor = (element: HTMLImageElement) => {\n\t\tconst buttons = document.querySelectorAll(\".conveyor_buttons\")\n\t\tbuttons.forEach((button: HTMLImageElement) => {\n\t\t\tbutton.style.borderColor = \"#000000\"\n\t\t});\n\t\telement.style.borderColor = \"#00FF00\";\n\t}\n\n\tinitializeButtons = (direction: Direction) => {\n\t\tthis.updateConveyorButtonImages(direction);\n\n\t\tthis.directionButtons.forEach((element: HTMLImageElement) => {\n\t\t\tlet direction = undefined;\n\t\t\tswitch(element.id){\n\t\t\t\tcase 'up':\n\t\t\t\t\tdirection = Direction.Up;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'down':\n\t\t\t\t\tdirection = Direction.Down;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'left':\n\t\t\t\t\tdirection = Direction.Left;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'right':\n\t\t\t\t\tdirection = Direction.Right;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst imageSource = getImage(direction,Conveyors.Mover).src;\n\t\t\telement.setAttribute('src', imageSource);\n\t\t});\n\n\t\t(document.querySelector(\"#base\") as HTMLImageElement).style.borderColor = \"#00FF00\";\n\n\t\tthis.menuButtons.forEach((element: HTMLImageElement) => {\n\t\t\telement.ondragstart = (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateConveyorButtonImages = (direction: Direction) => {\n\t\tthis.conveyorButtons.forEach((element: HTMLImageElement) => {\n\t\t\tconst imageSource = getImage(direction, stringToConveyor(element.getAttribute('id'))).src;\n\t\t\telement.setAttribute('src', imageSource);\n\t\t});\n\t}\n}","import { StateClass } from './state';\nimport { ViewClass } from './view';\nimport { stringToConveyor, stringToDirection } from './utils/stringTo'\nimport { MemoryType } from './types';\n\nconst setSize = () => {\n\tconst grid = document.getElementById('grid');\n\tconst width = grid.parentElement.clientWidth;\n\tconst height = grid.parentElement.clientHeight;\n\tconst size = width > height ? height : width;\n\tgrid.style.height = size + \"px\";\n\tgrid.style.width = size*1.5 + \"px\";\n\n\tif(width > height*1.5){\n\t\tgrid.style.height = height + \"px\";\n\t\tgrid.style.width = height*1.5 + \"px\";\n\t}\n\tif(height*1.5 > width) {\n\t\tgrid.style.height = width*2/3 + \"px\";\n\t\tgrid.style.width = width + \"px\";\n\t}\n}\n\nclass Controller {\n\tstate: StateClass;\n\tview: ViewClass;\n\n\tconstructor() {\n\t\tthis.state = new StateClass();\n\t\tthis.view = new ViewClass(this.state.menu.selectedDirection);\n\n\t\tconst canvas: HTMLCanvasElement = document.querySelector(\"#canvas\");\n\t\tcanvas.onclick = this.canvasOnClick;\n\n\t\tconst conveyorButtons: NodeListOf<HTMLImageElement> = document.querySelectorAll(\".conveyor_buttons\");\n\t\tconveyorButtons.forEach((button: HTMLImageElement) => {\n\t\t\tbutton.onclick = this.conveyorButtonOnClick;\n\t\t});\n\n\t\tconst directionButtons: NodeListOf<HTMLImageElement> = document.querySelectorAll(\".direction_buttons\");\n\t\tdirectionButtons.forEach((button: HTMLImageElement) => {\n\t\t\tbutton.onclick = this.directionButtonOnClick;\n\t\t});\n\n\t\tconst memoryButtons: NodeListOf<HTMLButtonElement> = document.querySelectorAll(\".memory_buttons\");\n\t\tmemoryButtons.forEach((button: HTMLButtonElement) => {\n\t\t\tbutton.onclick = this.memoryOnClick;\n\t\t});\n\n\t\t// TEMP remove later\n\t\t(document.querySelector(\"#prev_level\") as HTMLElement).onclick = this.prevLevelOnClick;\n\t\t(document.querySelector(\"#next_level\") as HTMLElement).onclick = this.nextLevelOnClick;\n\t\t(document.querySelector(\"#play_button\") as HTMLElement).onclick = this.gameLoop.start;\n\t\t(document.querySelector(\"#stop_button\") as HTMLElement).onclick = this.gameLoop.stop;\n\t\t(document.querySelector(\"#mover\") as HTMLImageElement).onload = this.gameLoop.draw;\n\t\tthis.view.updateLevelView(this.state.menu.selectedLevel,\n\t\t\tthis.state.level)\n\t\t// TEMP\n\n\t}\n\n\tgameLoop = {\n\t\t// Functions and data that relates to the main gameloop\n\t\ttimerId: undefined,\n\t\tisRunning: false,\n\t\tupdate: () => {\n\t\t\t// TODO: Move most of this into state\n\t\t\tif(this.state.box == undefined){\n\t\t\t\tthis.state.box = {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tvalue: this.state.level.input.shift(),\n\t\t\t\t\treturned: false\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst x = this.state.box.x;\n\t\t\t\tconst y = this.state.box.y;\n\n\t\t\t\tthis.state.board.grid[x][y].update(this.state.box);\n\t\t\t}\n\n\t\t\tif(this.state.box.returned){\n\t\t\t\t// TODO: Move into state as function\n\t\t\t\tthis.state.level.actualOutput.push(this.state.box.value);\n\t\t\t\tthis.state.box = undefined;\n\t\t\t}\n\n\t\t\tif(this.gameLoop.failureStateDetector()) {\n\t\t\t\tthis.gameLoop.stop();\n\t\t\t\tconsole.log(\"failed\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(this.state.level.actualOutput.length === this.state.level.expectedOutput.length) {\n\t\t\t\tthis.gameLoop.stop();\n\t\t\t\tconsole.log(\"ya did it\")\n\t\t\t\t// TODO: Add level completion handling\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.gameLoop.draw();\n\t\t},\n\n\t\tdraw: () => {\n\t\t\tthis.view.clearCanvas();\n\t\t\tthis.view.drawCells(this.state.board.grid, this.state.level.size);\n\t\t\tthis.view.drawBox(this.state.box, this.state.level.size);\n\t\t\tthis.view.updateMemoryView(this.state.board.memory)\n\t\t},\n\n\t\tfailureStateDetector: () => {\n\t\t\t// TODO: Move into state\n\t\t\tconst wrongNumber = !this.state.level.actualOutput.every((value, index) => (\n\t\t\t\tvalue === this.state.level.expectedOutput[index]\n\t\t\t));\n\n\t\t\tif(this.state.box === undefined) {\n\t\t\t\treturn wrongNumber;\n\t\t\t}\n\n\t\t\tconst failure = (\n\t\t\t\tthis.state.box.x < 0 ||\n\t\t\t\tthis.state.box.y < 0 ||\n\t\t\t\tthis.state.box.x >= this.state.level.size ||\n\t\t\t\tthis.state.box.y >= this.state.level.size\n\t\t\t)\n\n\t\t\t// TODO: Add displaying reason for failure\n\n\t\t\treturn failure;\n\t\t},\n\n\t\tstart: () => {\n\t\t\tif(this.gameLoop.isRunning) return;\n\t\t\tthis.gameLoop.isRunning = true;\n\t\t\tthis.state.level.input = [...this.state.level.initialInput];\n\t\t\tthis.gameLoop.timerId = setInterval(this.gameLoop.update, 300);\n\t\t},\n\n\t\tstop: () => {\n\t\t\tthis.gameLoop.isRunning = false;\n\t\t\tclearInterval(this.gameLoop.timerId);\n\n\t\t\tthis.state.box = undefined;\n\t\t\tthis.state.board.resetMemory();\n\t\t\tthis.state.level.actualOutput = []\n\n\t\t\tthis.gameLoop.draw();\n\t\t},\n\t}\n\n\tnextLevelOnClick = (e: MouseEvent) => {\n\t\tthis.state.levelOperations.nextLevel();\n\t\tthis.view.updateLevelView(this.state.menu.selectedLevel, this.state.level);\n\t\tconsole.log(\"test\")\n\t}\n\n\tprevLevelOnClick = (e: MouseEvent) => {\n\t\tthis.state.levelOperations.prevLevel();\n\t\tthis.view.updateLevelView(this.state.menu.selectedLevel, this.state.level);\n\t}\n\n\tconveyorButtonOnClick = (e: MouseEvent) => {\n\t\tconst element = (e.target as HTMLImageElement);\n\t\tthis.state.menu.selectedConveyor = stringToConveyor(element.id);\n\t\tthis.view.setConveyorButtonBorderColor(element);\n\t}\n\n\tdirectionButtonOnClick = (e: MouseEvent) => {\n\t\tconst element = (e.target as HTMLImageElement);\n\t\tthis.state.menu.selectedDirection = stringToDirection(element.id);\n\t\tthis.view.updateConveyorButtonImages(this.state.menu.selectedDirection);\n\t}\n\n\tmemoryOnClick = (e: MouseEvent) => {\n\t\tconst element = (e.target as HTMLButtonElement);\n\t\tswitch(element.value){\n\t\t\tcase 'a':\n\t\t\t\tthis.state.menu.selectedMemory = MemoryType.A;\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tthis.state.menu.selectedMemory = MemoryType.B;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\tthis.state.menu.selectedMemory = MemoryType.C;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tcanvasOnClick = (e: MouseEvent) => {\n\t\t\tif(this.gameLoop.isRunning) return;\n\n\t\t\tconst divisor = (e.target as HTMLElement).clientHeight/this.state.level.size;\n\n\t\t\tconst xclick = Math.floor(e.offsetX/divisor);\n\t\t\tconst yclick = Math.floor(e.offsetY/divisor);\n\n\t\t\tif(xclick == 0 && yclick == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.state.board.updateGrid(xclick, yclick);\n\n\t\t\tthis.gameLoop.draw()\n\t}\n}\n\nwindow.onload = setSize;\nwindow.onresize = setSize;\n\nnew Controller();"]}