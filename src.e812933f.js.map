{"version":3,"sources":["src/types.ts","src/image-loader.ts","src/objects/conveyors.ts","src/state.ts","src/utils/stringTo.ts","src/view.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.e812933f.js","sourceRoot":"..","sourcesContent":["import { Board } from \"./objects/board\";\n\nexport interface Box {\n\tx: number,\n\ty: number,\n\tvalue: number,\n\treturned: boolean\n}\n\nexport enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nexport enum Conveyors {\n\tBase,\n\tMover,\n\tAdder,\n\tSubtractor,\n\tMemoryAssigner,\n\tMemoryAdder,\n\tMemorySubtractor,\n\tMemorySplitter,\n\tReturner\n}\n\nexport interface Memory {\n\tA: number;\n\tB: number;\n\tC: number;\n}\n\nexport enum MemoryType {\n\tA,\n\tB,\n\tC\n}\n\nexport interface State {\n\tselectedConveyor: Conveyors;\n\tselectedMemory: MemoryType;\n\tselectedDirection: Direction;\n\tboardState: Board;\n\tlevel: Level;\n\tisRunning: boolean;\n\tupdate: () => void;\n\tstart: () => void;\n\treset: (won?:boolean) => void;\n\tnextLevel: () => void;\n\tprevLevel: () => void;\n}\n\nexport interface Level {\n\tname: string,\n\tdescription: string,\n\tinput: number[],\n\toutput: number[],\n\tsize: number,\n}","import base from './images/base.png'\nimport mover from './images/*_mover.png';\nimport adder from './images/*_adder.png';\nimport subtractor from './images/*_subtractor.png';\nimport memory from './images/*_memory.png';\nimport memory_adder from './images/*_memory_plus.png';\nimport memory_subtractor from './images/*_memory_minus.png';\nimport memory_splitter from './images/*_memory_splitter.png';\nimport { Direction, Conveyors } from './types';\n\nconst loadImage = (src: string) => {\n\tconst img = new Image();\n\timg.src = src;\n\treturn img;\n}\n\nexport const getImage = (direction: Direction, type: Conveyors) => {\n\tlet imageType;\n\n\tswitch(type){\n\t\tcase Conveyors.Base:\n\t\t\treturn images.base;\n\t\tcase Conveyors.Mover:\n\t\t\timageType = images.mover;\n\t\t\tbreak;\n\t\tcase Conveyors.Adder:\n\t\t\timageType = images.adder;\n\t\t\tbreak;\n\t\tcase Conveyors.Subtractor:\n\t\t\timageType = images.subtractor;\n\t\t\tbreak;\n\t\tcase Conveyors.MemoryAssigner:\n\t\t\timageType = images.memory;\n\t\t\tbreak;\n\t\tcase Conveyors.MemoryAdder:\n\t\t\timageType = images.memory_adder;\n\t\t\tbreak;\n\t\tcase Conveyors.MemorySubtractor:\n\t\t\timageType = images.memory_subtractor;\n\t\t\tbreak;\n\t\tcase Conveyors.MemorySplitter:\n\t\t\timageType = images.memory_splitter;\n\t\t\tbreak;\n\t\tcase Conveyors.Returner:\n\t\t\timageType = images.memory_splitter;\n\t\t\tbreak;\n\t}\n\n\tswitch(direction){\n\t\tcase Direction.Up:\n\t\t\treturn imageType.up;\n\t\tcase Direction.Down:\n\t\t\treturn imageType.down;\n\t\tcase Direction.Left:\n\t\t\treturn imageType.left;\n\t\tcase Direction.Right:\n\t\t\treturn imageType.right;\n\t}\n}\n\nconst images = {\n\tbase: loadImage(base),\n\tmover: {\n\t\tup: loadImage(mover.up),\n\t\tdown: loadImage(mover.down),\n\t\tleft: loadImage(mover.left),\n\t\tright: loadImage(mover.right),\n\t},\n\tadder: {\n\t\tup: loadImage(adder.up),\n\t\tdown: loadImage(adder.down),\n\t\tleft: loadImage(adder.left),\n\t\tright: loadImage(adder.right),\n\t},\n\tsubtractor: {\n\t\tup: loadImage(subtractor.up),\n\t\tdown: loadImage(subtractor.down),\n\t\tleft: loadImage(subtractor.left),\n\t\tright: loadImage(subtractor.right),\n\t},\n\tmemory: {\n\t\tup: loadImage(memory.up),\n\t\tdown: loadImage(memory.down),\n\t\tleft: loadImage(memory.left),\n\t\tright: loadImage(memory.right),\n\t},\n\tmemory_adder: {\n\t\tup: loadImage(memory_adder.up),\n\t\tdown: loadImage(memory_adder.down),\n\t\tleft: loadImage(memory_adder.left),\n\t\tright: loadImage(memory_adder.right),\n\t},\n\tmemory_subtractor: {\n\t\tup: loadImage(memory_subtractor.up),\n\t\tdown: loadImage(memory_subtractor.down),\n\t\tleft: loadImage(memory_subtractor.left),\n\t\tright: loadImage(memory_subtractor.right),\n\t},\n\tmemory_splitter: {\n\t\tup: loadImage(memory_splitter.up),\n\t\tdown: loadImage(memory_splitter.down),\n\t\tleft: loadImage(memory_splitter.left),\n\t\tright: loadImage(memory_splitter.right),\n\t},\n}","import {Direction, Conveyors, MemoryType, Memory, Box} from '../types';\nimport { getImage } from '../image-loader';\n\nexport function ConveyorFactory(type: Conveyors, direction: Direction, memory_type: MemoryType, memory) {\n\tswitch(type){\n\t\tcase Conveyors.Base:\n\t\t\treturn new Base(direction);\n\t\tcase Conveyors.Mover:\n\t\t\treturn new Mover(direction);\n\t\tcase Conveyors.Adder:\n\t\t\treturn new Adder(direction);\n\t\tcase Conveyors.Subtractor:\n\t\t\treturn new Subtractor(direction);\n\t\tcase Conveyors.MemoryAssigner:\n\t\t\treturn new MemoryAssigner(direction, memory_type, memory)\n\t\tcase Conveyors.MemoryAdder:\n\t\t\treturn new MemoryAdder(direction, memory_type, memory)\n\t\tcase Conveyors.MemorySubtractor:\n\t\t\treturn new MemorySubtractor(direction, memory_type, memory)\n\t\tcase Conveyors.MemorySplitter:\n\t\t\treturn new MemorySplitter(direction, memory_type, memory)\n\t\tcase Conveyors.Returner:\n\t\t\treturn new Returner(direction)\n\t\tdefault:\n\t\t\treturn new Base(direction);\n\t}\n}\n\nexport class Base {\n\tdirection: Direction;\n\tconstructor(direction: Direction){\n\t\tthis.direction = direction;\n\t}\n\tupdate(box: Box) {};\n\tdraw(ctx: CanvasRenderingContext2D, \n\t\t\twidth: number, height: number, size: number,\n\t\t\tx: number, y: number) {\n\n\t\tlet img = getImage(this.direction, this.type);\n\n\t\tctx.drawImage(\n\t\t\timg,\n\t\t\twidth/size*x, height/size*y,\n\t\t\twidth/size, height/size);\n\t}\n\ttype = Conveyors.Base;\n}\n\nexport class Returner extends Base {\n\ttype = Conveyors.Returner;\n\tupdate(box: Box) {\n\t\tbox.returned = true;\n\t}\n}\n\nexport class Mover extends Base {\n\ttype = Conveyors.Mover;\n\tconstructor(direction: Direction){\n\t\tsuper(direction);\n\t}\n\n\tupdate(box: Box) {\n\t\tswitch(this.direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class Adder extends Mover {\n\ttype = Conveyors.Adder;\n\tconstructor(direction: Direction) {\n\t\tsuper(direction);\n\t}\n\n\tupdate(box: Box) {\n\t\tsuper.update(box);\n\t\tbox.value++;\n\t}\n}\n\nexport class Subtractor extends Mover {\n\ttype = Conveyors.Subtractor;\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tbox.value--;\n\t}\n}\n\nexport class MemoryAssigner extends Mover {\n\ttype = Conveyors.MemoryAssigner;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tvalue: number;\n\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A = box.value;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B = box.value;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C = box.value;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class MemoryAdder extends Mover {\n\ttype = Conveyors.MemoryAdder;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A++;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B++;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C++;\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n}\n\nexport class MemorySubtractor extends Mover {\n\ttype = Conveyors.MemorySubtractor;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A--;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B--;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class MemorySplitter extends Mover {\n\ttype = Conveyors.MemorySplitter;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tSplitter(box, this.direction, this.memory.A);\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tSplitter(box, this.direction, this.memory.B);\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tSplitter(box, this.direction, this.memory.C);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction Splitter(box: Box, direction: Direction, value: number){\n\tif(value > 0){\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t}\n\t// If value < 0, go to the left\n\t} else if (value < 0){\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t}\n\t// If value == 0, follow direction\n\t} else {\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}","import { Conveyors, Direction, State, Level, MemoryType } from './types';\nimport {Base, ConveyorFactory} from './objects/conveyors'\n\nexport class StateClass {\n\tmenu = {\n\t\tselectedConveyor: Conveyors.Base,\n\t\tselectedMemory: MemoryType.A,\n\t\tselectedDirection: Direction.Down,\n\t}\n\n\tlevel = {\n\t\tsize: 3,\n\t\tinitialInput: [0,0,0],\n\t\tinput: [],\n\t\texpectedOutput: [1,1,1],\n\t\tactualOutput: []\n\t}\n\n\tbox = {\n\t\tx: 0,\n\t\ty: 0,\n\t\tvalue: 0,\n\t\treturned: false\n\t}\n\n\tboxOperations = {\n\n\t}\n\n\tboard = {\n\t\tmemory: {\n\t\t\tA: 0,\n\t\t\tB: 0,\n\t\t\tC: 0\n\t\t},\n\n\t\tresetMemory: () => {\n\t\t\tthis.board.memory.A = 0;\n\t\t\tthis.board.memory.B = 0;\n\t\t\tthis.board.memory.C = 0;\n\t\t},\n\n\t\tgrid: [],\n\n\t\tcreateGrid: (size: number) => {\n\t\t\tconst grid = Array(size).fill(undefined)\n\t\t\t.map(()=>Array(size).fill(undefined))\n\n\t\t\tthis.board.grid = grid.map((row) => (row.map(() => (\n\t\t\t\tConveyorFactory(\n\t\t\t\t\tConveyors.Base,\n\t\t\t\t\tDirection.Up,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined\n\t\t\t\t)\n\t\t\t\t))))\n\t\t},\n\n\t\tresetGrid: () => {\n\t\t\tthis.board.createGrid(this.level.size);\n\t\t\tthis.board.grid[0][0] = ConveyorFactory(\n\t\t\t\tConveyors.Mover,\n\t\t\t\tDirection.Down,\n\t\t\t\tundefined,\n\t\t\t\tundefined\n\t\t\t)\n\t\t},\n\n\t\tupdateGrid: (x: number, y: number) => {\n\t\t\tthis.board.grid[x][y] = ConveyorFactory(\n\t\t\t\tthis.menu.selectedConveyor,\n\t\t\t\tthis.menu.selectedDirection,\n\t\t\t\tthis.menu.selectedMemory,\n\t\t\t\tthis.board.memory\n\t\t\t\t);\n\t\t},\n\t}\n\n\tlevelIndex: number = 0;\n\tisRunning: boolean = false;\n\tinterval: number;\n\t\n\tconstructor() {\n\t\tthis.board.resetGrid();\n\t\tthis.box = undefined;\n\t}\n\n\t/*\n\tnextLevel = () => {\n\t\tif(this.isRunning) return;\n\t\tthis.levelIndex = this.levelIndex < levels.length-1? this.levelIndex+1:this.levelIndex;\n\t\tthis.setLevel();\n\t}\n\n\tprevLevel = () => {\n\t\tif(this.isRunning) return;\n\t\tthis.levelIndex = this.levelIndex > 0? this.levelIndex-1:this.levelIndex;\n\t\tthis.setLevel();\n\t}\n\n\tsetLevel = () => {\n\t\tthis.level = levels[this.levelIndex];\n\t\tthis.boardState = new Board(this.level.size);\n\n\t\tconst canvasSize = this.level.size * 128;\n\t\tthis.canvas.height = canvasSize;\n\t\tthis.canvas.width = canvasSize;\n\n\t\tthis.draw();\n\n\t\tdocument.getElementById(\"level_name\").innerHTML = this.level.name;\n\t\tdocument.getElementById(\"level_name\").style.color = \"black\";\n\t\tdocument.getElementById(\"level_description\").innerHTML = this.level.description;\n\t\tdocument.getElementById(\"input\").innerHTML = \"Input: \" + this.level.input.toString();\n\t\tdocument.getElementById(\"output\").innerHTML = \"Output: \" + this.level.output.toString();\n\t}\n\t*/\n\n\t/*\n\tdraw = () => {\n\t\tthis.context.fillStyle = \"#eeeeee\";\n\t\tthis.context.fillRect(0,0,this.canvas.width, this.canvas.height)\n\t\tthis.boardState.draw(this.context, this.canvas.width, this.canvas.height);\n\t\tthis.boxHandler.draw(this.context, this.canvas.width, this.canvas.height, this.boardState.size);\n\t}\n\t*/\n\n\t/*\n\tstart = () =>{\n\t\tdocument.getElementById(\"level_name\").style.color = \"black\";\n\t\tconst button = document.getElementById(\"start\");\n\t\tbutton.innerHTML = \"Stop\";\n\n\t\tthis.isRunning = true;\n\t\tthis.update();\n\t\tthis.draw();\n\n\t\tthis.interval = setInterval(() => {\n\t\t\tthis.update();\n\t\t\tthis.draw();\n\t\t}, 300);\n\t}\n\n\treset = (won: boolean = false) => {\n\t\tconst button = document.getElementById(\"start\");\n\t\tbutton.innerHTML = \"Start\";\n\n\t\tthis.boxHandler.reset(won);\n\n\t\tclearInterval(this.interval);\n\t\tthis.isRunning = false;\n\n\t\tthis.boardState.memory.A = 0;\n\t\tthis.boardState.memory.B = 0;\n\t\tthis.boardState.memory.C = 0;\n\n\t\tthis.draw();\n\t}\n\t*/\n}","import {Conveyors, Direction} from '../types';\n\nexport const stringToDirection = (name: String): Direction => {\n\tswitch(name){\n\t\tcase 'up':\n\t\t\treturn Direction.Up;\n\t\tcase 'down':\n\t\t\treturn Direction.Down;\n\t\tcase 'left':\n\t\t\treturn Direction.Left;\n\t\tcase 'right':\n\t\t\treturn Direction.Right;\n\t}\n}\n\nexport const stringToConveyor = (name: String): Conveyors => {\n\tswitch(name){\n\t\tcase 'base':\n\t\t\treturn Conveyors.Base;\n\t\tcase 'mover':\n\t\t\treturn Conveyors.Mover;\n\t\tcase 'adder':\n\t\t\treturn Conveyors.Adder;\n\t\tcase 'subtractor':\n\t\t\treturn Conveyors.Subtractor;\n\t\tcase 'memory_assigner':\n\t\t\treturn Conveyors.MemoryAssigner;\n\t\tcase 'memory_adder':\n\t\t\treturn Conveyors.MemoryAdder;\n\t\tcase 'memory_subtractor':\n\t\t\treturn Conveyors.MemorySubtractor;\n\t\tcase 'memory_splitter':\n\t\t\treturn Conveyors.MemorySplitter;\n\t\tcase 'returner':\n\t\t\treturn Conveyors.Returner;\n\t}\n}","import { Direction, Conveyors } from \"./types\";\nimport {getImage} from \"./image-loader\"\nimport { stringToConveyor } from \"./utils/stringTo\";\nimport { Base } from \"./objects/conveyors\";\n\nexport class ViewClass {\n\tcanvas: HTMLCanvasElement;\n\tctx: CanvasRenderingContext2D;\n\tmenuButtons: NodeListOf<HTMLImageElement>;\n\tconveyorButtons: NodeListOf<HTMLImageElement>;\n\tdirectionButtons: NodeListOf<HTMLImageElement>;\n\n\tconstructor(direction: Direction){\n\t\tthis.canvas = document.querySelector('#canvas');\n\t\tthis.ctx = this.canvas.getContext('2d');\n\t\tthis.initializeCanvas();\n\n\t\tthis.menuButtons = document.querySelectorAll(\".menu_buttons\");\n\t\tthis.conveyorButtons = document.querySelectorAll(\".conveyor_buttons\");\n\t\tthis.directionButtons = document.querySelectorAll(\".direction_buttons\");\n\t\tthis.initializeButtons(direction);\n\t}\n\n\tdrawBox = (box, size) => {\n\n\t\tif(box == undefined) return;\n\n\t\tconst width = this.canvas.width;\n\t\tconst height = this.canvas.height;\n\t\t\n\t\tthis.ctx.fillStyle = \"#000000\";\n\t\tthis.ctx.fillRect(width/size*box.x,height/size*box.y, width/size, height/size);\n\t}\n\n\tdrawCells = (grid: Array<Array<Base>>, size: number) => {\n\t\tconst width = this.canvas.width;\n\t\tconst height = this.canvas.height;\n\n\t\tfor(var x = 0; x < grid.length; x++){\n\t\t\tfor(var y = 0; y < grid.length; y++){\n\t\t\t\tconst conveyor = grid[x][y];\n\n\t\t\t\tconst img = getImage(\n\t\t\t\t\tconveyor.direction,\n\t\t\t\t\tconveyor.type\n\t\t\t\t)\n\n\t\t\t\tthis.ctx.drawImage(\n\t\t\t\t\timg,\n\t\t\t\t\twidth/size*x, height/size*y,\n\t\t\t\t\twidth/size, height/size);\n\t\t\t\t\t// TODO: Modify to draw 0,0 as special cell\n\t\t\t}\n\t\t}\n\t}\n\n\tinitializeCanvas = () => {\n\t\t// TODO: Resize on level change\n\t\tthis.canvas.setAttribute(\"height\", \"48\")\n\t\tthis.canvas.setAttribute(\"width\", \"48\")\n\t\tthis.ctx.fillStyle = \"#eeeeee\";\n\t\tthis.ctx.fillRect(0,0,this.canvas.width, this.canvas.height)\n\t}\n\n\tsetConveyorButtonBorderColor = (element: HTMLImageElement) => {\n\t\tconst buttons = document.querySelectorAll(\".conveyor_buttons\")\n\t\tbuttons.forEach((button: HTMLImageElement) => {\n\t\t\tbutton.style.borderColor = \"#000000\"\n\t\t});\n\t\telement.style.borderColor = \"#00FF00\";\n\t}\n\n\tinitializeButtons = (direction: Direction) => {\n\t\tthis.updateConveyorButtonImages(direction);\n\n\t\tthis.directionButtons.forEach((element: HTMLImageElement) => {\n\t\t\tlet direction = undefined;\n\t\t\tswitch(element.id){\n\t\t\t\tcase 'up':\n\t\t\t\t\tdirection = Direction.Up;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'down':\n\t\t\t\t\tdirection = Direction.Down;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'left':\n\t\t\t\t\tdirection = Direction.Left;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'right':\n\t\t\t\t\tdirection = Direction.Right;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst imageSource = getImage(direction,Conveyors.Mover).src;\n\t\t\telement.setAttribute('src', imageSource);\n\t\t});\n\n\t\t(document.querySelector(\"#base\") as HTMLImageElement).style.borderColor = \"#00FF00\";\n\n\t\tthis.menuButtons.forEach((element: HTMLImageElement) => {\n\t\t\telement.ondragstart = (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateConveyorButtonImages = (direction: Direction) => {\n\t\tthis.conveyorButtons.forEach((element: HTMLImageElement) => {\n\t\t\tconst imageSource = getImage(direction, stringToConveyor(element.getAttribute('id'))).src;\n\t\t\telement.setAttribute('src', imageSource);\n\t\t});\n\t}\n}","import { StateClass } from './state';\nimport { ViewClass } from './view';\nimport { stringToConveyor, stringToDirection } from './utils/stringTo'\nimport { Conveyors } from './types';\n\nconst setSize = () => {\n\tconst grid = document.getElementById('grid');\n\tconst width = grid.parentElement.clientWidth;\n\tconst height = grid.parentElement.clientHeight;\n\tconst size = width > height ? height : width;\n\tgrid.style.height = size + \"px\";\n\tgrid.style.width = size*1.5 + \"px\";\n\n\tif(width > height*1.5){\n\t\tgrid.style.height = height + \"px\";\n\t\tgrid.style.width = height*1.5 + \"px\";\n\t\tconsole.log(\"height\")\n\t}\n\tif(height*1.5 > width) {\n\t\tgrid.style.height = width*2/3 + \"px\";\n\t\tgrid.style.width = width + \"px\";\n\t\tconsole.log(\"width\")\n\t}\n}\n\nclass Controller {\n\tstate: StateClass;\n\tview: ViewClass;\n\n\tconstructor() {\n\t\tthis.state = new StateClass();\n\t\tthis.view = new ViewClass(this.state.menu.selectedDirection);\n\n\t\tconst canvas: HTMLCanvasElement = document.querySelector(\"#canvas\");\n\t\tcanvas.onclick = this.canvasOnClick;\n\n\t\tconst conveyorButtons: NodeListOf<HTMLImageElement> = document.querySelectorAll(\".conveyor_buttons\");\n\t\tconveyorButtons.forEach((button: HTMLImageElement) => {\n\t\t\tbutton.onclick = this.conveyorButtonOnClick;\n\t\t});\n\n\t\tconst directionButtons: NodeListOf<HTMLImageElement> = document.querySelectorAll(\".direction_buttons\");\n\t\tdirectionButtons.forEach((button: HTMLImageElement) => {\n\t\t\tbutton.onclick = this.directionButtonOnClick;\n\t\t});\n\n\t\t// TEMP remove later\n\t\t(document.querySelector(\"#tmpbutton\") as HTMLElement).onclick = this.gameLoop.start;\n\t\t(document.querySelector(\"#tmpbutton2\") as HTMLElement).onclick = this.gameLoop.stop;\n\t\t(document.querySelector(\"#mover\") as HTMLImageElement).onload = this.gameLoop.draw;\n\t\t// TEMP\n\n\t}\n\n\tgameLoop = {\n\t\t// Functions and data that relates to the main gameloop\n\t\ttimerId: undefined,\n\t\tisRunning: false,\n\t\tupdate: () => {\n\t\t\t// TODO: Move most of this into state\n\t\t\tif(this.state.box == undefined){\n\t\t\t\tthis.state.box = {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\tvalue: this.state.level.input.shift(),\n\t\t\t\t\treturned: false\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst x = this.state.box.x;\n\t\t\t\tconst y = this.state.box.y;\n\n\t\t\t\tthis.state.board.grid[x][y].update(this.state.box);\n\t\t\t}\n\n\t\t\tif(this.state.box.returned){\n\t\t\t\t// TODO: Move into state as function\n\t\t\t\tthis.state.level.actualOutput.push(this.state.box.value);\n\t\t\t\tthis.state.box = undefined;\n\t\t\t}\n\n\t\t\tif(this.gameLoop.failureStateDetector()) {\n\t\t\t\tthis.gameLoop.stop();\n\t\t\t\tconsole.log(\"failed\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(this.state.level.actualOutput.length === this.state.level.expectedOutput.length) {\n\t\t\t\tthis.gameLoop.stop();\n\t\t\t\tconsole.log(\"ya did it\")\n\t\t\t\t// TODO: Add level completion handling\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.gameLoop.draw();\n\t\t},\n\n\t\tdraw: () => {\n\t\t\tthis.view.drawCells(this.state.board.grid, this.state.level.size);\n\t\t\tthis.view.drawBox(this.state.box, this.state.level.size);\n\t\t},\n\n\t\tfailureStateDetector: () => {\n\t\t\t// TODO: Move into state\n\t\t\tconst wrongNumber = !this.state.level.actualOutput.every((value, index) => (\n\t\t\t\tvalue === this.state.level.expectedOutput[index]\n\t\t\t));\n\n\t\t\tif(this.state.box === undefined) {\n\t\t\t\treturn wrongNumber;\n\t\t\t}\n\n\t\t\tconst failure = (\n\t\t\t\tthis.state.box.x < 0 ||\n\t\t\t\tthis.state.box.y < 0 ||\n\t\t\t\tthis.state.box.x >= this.state.level.size ||\n\t\t\t\tthis.state.box.y >= this.state.level.size\n\t\t\t)\n\n\t\t\t// TODO: Add displaying reason for failure\n\n\t\t\treturn failure;\n\t\t},\n\n\t\tstart: () => {\n\t\t\tif(this.gameLoop.isRunning) return;\n\t\t\tthis.gameLoop.isRunning = true;\n\t\t\tthis.state.level.input = [...this.state.level.initialInput];\n\t\t\tthis.gameLoop.timerId = setInterval(this.gameLoop.update, 300);\n\t\t},\n\n\t\tstop: () => {\n\t\t\tthis.gameLoop.isRunning = false;\n\t\t\tclearInterval(this.gameLoop.timerId);\n\n\t\t\tthis.state.box = undefined;\n\t\t\tthis.state.board.memory = {\n\t\t\t\tA:0,\n\t\t\t\tB:0,\n\t\t\t\tC:0\n\t\t\t}\n\t\t\tthis.state.level.actualOutput = []\n\n\t\t\tthis.gameLoop.draw();\n\t\t},\n\t}\n\n\tconveyorButtonOnClick = (e: MouseEvent) => {\n\t\tconst element = (e.target as HTMLImageElement);\n\t\tthis.state.menu.selectedConveyor = stringToConveyor(element.id);\n\t\tthis.view.setConveyorButtonBorderColor(element);\n\t}\n\n\tdirectionButtonOnClick = (e: MouseEvent) => {\n\t\tconst element = (e.target as HTMLImageElement);\n\t\tthis.state.menu.selectedDirection = stringToDirection(element.id);\n\t\tthis.view.updateConveyorButtonImages(this.state.menu.selectedDirection);\n\t}\n\n\tcanvasOnClick = (e: MouseEvent) => {\n\t\t\tif(this.gameLoop.isRunning) return;\n\n\t\t\tconst divisor = (e.target as HTMLElement).clientHeight/this.state.level.size;\n\n\t\t\tconst xclick = Math.floor(e.offsetX/divisor);\n\t\t\tconst yclick = Math.floor(e.offsetY/divisor);\n\n\t\t\tif(xclick == 0 && yclick == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.state.board.updateGrid(xclick, yclick);\n\n\t\t\tthis.gameLoop.draw()\n\t}\n}\n\nwindow.onload = setSize;\nwindow.onresize = setSize;\n\nnew Controller();"]}