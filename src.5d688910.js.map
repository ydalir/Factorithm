{"version":3,"sources":["src/types.ts","src/objects/boxes.ts","src/images/loader.ts","src/objects/conveyors.ts","src/objects/board.ts","src/input.ts","src/levels.ts","src/state.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.5d688910.js","sourceRoot":"..","sourcesContent":["import { Board } from \"./objects/board\";\nimport { BoxHandler } from \"./objects/boxes\";\n\nexport enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nexport enum Conveyors {\n\tBase,\n\tMover,\n\tAdder,\n\tSubtractor,\n\tMemoryAssigner,\n\tMemoryAdder,\n\tMemorySubtractor,\n\tMemorySplitter,\n}\n\nexport interface Memory {\n\tA: number;\n\tB: number;\n\tC: number;\n}\n\nexport enum MemoryType {\n\tA,\n\tB,\n\tC\n}\n\nexport interface State {\n\tselectedPiece: Conveyors;\n\tselectedMemory: MemoryType;\n\tdirection: Direction;\n\tboardState: Board;\n\tlevel: Level;\n\tcanvas: HTMLCanvasElement;\n\tcontext: CanvasRenderingContext2D;\n\tboxHandler: BoxHandler;\n\tisRunning: boolean;\n\tupdate: () => void;\n\tstart: () => void;\n\treset: (won?:boolean) => void;\n\tnextLevel: () => void;\n\tprevLevel: () => void;\n}\n\nexport interface Level {\n\tname: string,\n\tdescription: string,\n\tinput: number[],\n\toutput: number[],\n\tsize: number,\n}","import { Base } from './conveyors';\nimport { Level } from '../types';\nimport { Board } from './board';\n\nexport class BoxHandler {\n\tboxes: Box[] = [];\n\tboxIndex: number = 0;\n\n\tupdate(level: Level, boardState: Board, reset: any) {\n\t\tif(this.boxes.length == 0) {this.boxes.push(new Box(Math.floor(boardState.size/2),0,\n\t\t\tlevel.input[this.boxIndex]))}\n\n\t\telse {this.boxes.forEach((box) => {box.update(boardState.board)});}\n\n\t\t// rename\n\t\tconst endBox = this.boxes.find((box: Box) => {\n\t\t\tconst x = box.x == Math.floor(boardState.size/2);\n\t\t\tconst y = box.y == boardState.size\n\t\t\treturn x && y;\n\t\t});\n\n\t\tif(endBox) {\n\t\t\t// make this less confusing\n\t\t\tconst val = endBox.value == level.output[this.boxIndex];\n\t\t\tif(!val) {reset(); return;}\n\t\t\telse {this.boxes = [];}\n\t\t\tthis.boxIndex++;\n\t\t\tif(this.boxIndex >= level.input.length){\n\t\t\t\treset(true);\n\t\t\t}\n\t\t}\n\n\t\tconst outOfBounds = this.boxes.find((box: Box) => {\n\t\t\tconst left = box.x < 0;\n\t\t\tconst right = box.x >= boardState.size;\n\t\t\tconst top = box.y < 0;\n\t\t\tconst bottom = box.y >= boardState.size;\n\n\t\t\treturn left || right || top || bottom;\n\t\t});\n\n\t\tif(outOfBounds) {reset(); return;}\n\n\t}\n\n\tdraw = (ctx: CanvasRenderingContext2D, width: number, height: number, size: number) => {\n\t\tthis.boxes.forEach((box) => {\n\t\t\tbox.draw(ctx, width, height, size);\n\t\t});\n\t}\n\treset = (won: boolean) => {\n\t\tthis.boxIndex = 0;\n\t\tthis.boxes = [];\n\t\tif(won){\n\t\t\tdocument.getElementById(\"level_name\").style.color = \"green\";\n\t\t}\n\t}\n}\n\nexport class Box {\n\tvalue: number;\n\tx: number;\n\ty: number;\n\n\tconstructor(x: number, y: number, value: number = 0) {\n\t\tthis.value = value;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tupdate = (conveyors: Base[][]) => {\n\t\tconveyors[this.x][this.y].update(this);\n\t}\n\n\tdraw = (ctx: CanvasRenderingContext2D, width: number, height: number, size: number) => {\n\t\tctx.fillStyle = \"#000000\";\n\t\tctx.fillRect(width/size*this.x,height/size*this.y, width/size, height/size);\n\t\tctx.fillStyle = \"#ffffff\";\n\t\tctx.font = \"50px sans-serif\"\n\t\tctx.fillText(this.value.toString(), width/size*this.x, height/size*(this.y+1));\n\t}\n}","import base from './base.png'\nimport mover from './*_mover.png';\nimport adder from './*_adder.png';\nimport subtractor from './*_subtractor.png';\nimport memory from './*_memory.png';\nimport memory_adder from './*_memory_plus.png';\nimport memory_subtractor from './*_memory_minus.png';\nimport memory_splitter from './*_memory_splitter.png';\nimport { Direction, Conveyors } from '../types';\n\nconst loadImage = (src: string) => {\n\tconst img = new Image();\n\timg.src = src;\n\treturn img;\n}\n\n//const getMemoryImage implement, get memory overlay\n\nconst getImage = (direction: Direction, type: Conveyors) => {\n\tlet imageType;\n\n\tswitch(type){\n\t\tcase Conveyors.Base:\n\t\t\t// TODO: replace with base image\n\t\t\treturn getBlank()\n\t\tcase Conveyors.Mover:\n\t\t\timageType = images.mover;\n\t\t\tbreak;\n\t\tcase Conveyors.Adder:\n\t\t\timageType = images.adder;\n\t\t\tbreak;\n\t\tcase Conveyors.Subtractor:\n\t\t\timageType = images.subtractor;\n\t\t\tbreak;\n\t\tcase Conveyors.MemoryAssigner:\n\t\t\timageType = images.memory;\n\t\t\tbreak;\n\t\tcase Conveyors.MemoryAdder:\n\t\t\timageType = images.memory_adder;\n\t\t\tbreak;\n\t\tcase Conveyors.MemorySubtractor:\n\t\t\timageType = images.memory_subtractor;\n\t\t\tbreak;\n\t\tcase Conveyors.MemorySplitter:\n\t\t\timageType = images.memory_splitter;\n\t\t\tbreak;\n\t}\n\n\tswitch(direction){\n\t\tcase Direction.Up:\n\t\t\treturn imageType.up;\n\t\tcase Direction.Down:\n\t\t\treturn imageType.down;\n\t\tcase Direction.Left:\n\t\t\treturn imageType.left;\n\t\tcase Direction.Right:\n\t\t\treturn imageType.right;\n\t}\n}\n\nconst images = {\n\tmover: {\n\t\tup: loadImage(mover.up),\n\t\tdown: loadImage(mover.down),\n\t\tleft: loadImage(mover.left),\n\t\tright: loadImage(mover.right),\n\t},\n\tadder: {\n\t\tup: loadImage(adder.up),\n\t\tdown: loadImage(adder.down),\n\t\tleft: loadImage(adder.left),\n\t\tright: loadImage(adder.right),\n\t},\n\tsubtractor: {\n\t\tup: loadImage(subtractor.up),\n\t\tdown: loadImage(subtractor.down),\n\t\tleft: loadImage(subtractor.left),\n\t\tright: loadImage(subtractor.right),\n\t},\n\tmemory: {\n\t\tup: loadImage(memory.up),\n\t\tdown: loadImage(memory.down),\n\t\tleft: loadImage(memory.left),\n\t\tright: loadImage(memory.right),\n\t},\n\tmemory_adder: {\n\t\tup: loadImage(memory_adder.up),\n\t\tdown: loadImage(memory_adder.down),\n\t\tleft: loadImage(memory_adder.left),\n\t\tright: loadImage(memory_adder.right),\n\t},\n\tmemory_subtractor: {\n\t\tup: loadImage(memory_subtractor.up),\n\t\tdown: loadImage(memory_subtractor.down),\n\t\tleft: loadImage(memory_subtractor.left),\n\t\tright: loadImage(memory_subtractor.right),\n\t},\n\tmemory_splitter: {\n\t\tup: loadImage(memory_splitter.up),\n\t\tdown: loadImage(memory_splitter.down),\n\t\tleft: loadImage(memory_splitter.left),\n\t\tright: loadImage(memory_splitter.right),\n\t},\n}\n\nexport default getImage;\n\nexport const getBlank = () => {\n\treturn loadImage(base)\n\t// change to store loadImage in images object instead of reloading image all the time\n}\n\n/*\nconst setButtonImages = () => {\n\tconst buttons = document.getElementsByClassName(\"buttons or something\")\n\tlet thing;\n\tbuttons.foreach\n\tswitch buttons.id\n\t\tcase base:\n\t\t\tthing = base\n\n\tswitch direction\n\t\tcase up\n\t\t\tbuttons.src = thing.up\n}\n*/","import {Direction, Conveyors, MemoryType, Memory} from '../types';\nimport {Box} from './boxes';\nimport getImage from '../images/loader';\n\nexport class Base {\n\tdirection: Direction;\n\tconstructor(direction: Direction){\n\t\tthis.direction = direction;\n\t}\n\tupdate(box: Box) {};\n\tdraw(ctx: CanvasRenderingContext2D, \n\t\t\twidth: number, height: number, size: number,\n\t\t\tx: number, y: number) {\n\n\t\tlet img = getImage(this.direction, this.type);\n\n\t\tctx.drawImage(\n\t\t\timg,\n\t\t\twidth/size*x, height/size*y,\n\t\t\twidth/size, height/size);\n\t}\n\ttype = Conveyors.Base;\n}\n\nexport class Mover extends Base {\n\ttype = Conveyors.Mover;\n\tconstructor(direction: Direction){\n\t\tsuper(direction);\n\t}\n\n\tupdate(box: Box) {\n\t\tsuper.update(box);\n\n\t\tswitch(this.direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class Adder extends Mover {\n\ttype = Conveyors.Adder;\n\tconstructor(direction: Direction) {\n\t\tsuper(direction);\n\t}\n\n\tupdate(box: Box) {\n\t\tsuper.update(box);\n\t\tbox.value++;\n\t}\n}\n\nexport class Subtractor extends Mover {\n\ttype = Conveyors.Subtractor;\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tbox.value--;\n\t}\n}\n\nexport class MemoryAssigner extends Mover {\n\ttype = Conveyors.MemoryAssigner;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tvalue: number;\n\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tconsole.log(this.memory.A)\n\t}\n\n\tdraw = (ctx: CanvasRenderingContext2D, \n\t\t\twidth: number, height: number, size: number,\n\t\t\tx: number, y: number) => {\n\n\t\tsuper.draw(ctx,width,height,size,x,y);\n\n\t\tctx.fillStyle = \"#ff0000\";\n\t\tctx.font = \"50px sans-serif\"\n\t\tlet value: number;\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tvalue = this.memory.A\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tvalue = this.memory.B\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tvalue = this.memory.C\n\t\t\t\tbreak;\n\t\t}\n\t\tctx.fillText(value.toString(), width/size*x, height/size*(y+1));\n\t}\n}\n\nexport class MemoryAdder extends Mover {\n\ttype = Conveyors.MemoryAdder;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A++;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B++;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C++;\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n}\n\nexport class MemorySubtractor extends Mover {\n\ttype = Conveyors.MemorySubtractor;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tsuper.update(box);\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tthis.memory.A--;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tthis.memory.B--;\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tthis.memory.C--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class MemorySplitter extends Mover {\n\ttype = Conveyors.MemorySplitter;\n\tmemory_type: MemoryType;\n\tmemory: Memory;\n\n\tconstructor(direction: Direction, memory_type: MemoryType, memory: Memory){\n\t\tsuper(direction);\n\t\tthis.memory_type = memory_type;\n\t\tthis.memory = memory;\n\t}\n\n\tupdate = (box: Box) => {\n\t\tswitch(this.memory_type){\n\t\t\tcase MemoryType.A:\n\t\t\t\tSplitter(box, this.direction, this.memory.A);\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.B:\n\t\t\t\tSplitter(box, this.direction, this.memory.B);\n\t\t\t\tbreak;\n\t\t\tcase MemoryType.C:\n\t\t\t\tSplitter(box, this.direction, this.memory.C);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction Splitter(box: Box, direction: Direction, value: number){\n\tif(value > 0){\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t}\n\t// If value < 0, go to the left\n\t} else if (value < 0){\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t}\n\t// If value == 0, follow direction\n\t} else {\n\t\tswitch(direction){\n\t\t\tcase Direction.Right:\n\t\t\t\tbox.x++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Down:\n\t\t\t\tbox.y++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Left:\n\t\t\t\tbox.x--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.Up:\n\t\t\t\tbox.y--;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}","import { Base } from \"./conveyors\";\nimport { Direction, Memory } from \"../types\";\n\nexport class Board {\n\tboard: Base[][];\n\tsize: number;\n\tmemory: Memory = {\n\t\tA: 0,\n\t\tB: 0,\n\t\tC: 0,\n\t}\n\n\tconstructor(N: number) {\n\t\tthis.size = N;\n\t\tthis.board = new Array(this.size).fill(1).map(() => {\n\t\t\treturn Array(this.size).fill(1).map(() => {\n\t\t\t\treturn new Base(Direction.Right);\n\t\t\t})\n\t\t});\n\t}\n\n\tdraw(ctx: CanvasRenderingContext2D, width: number, height: number) {\n\t\tfor(let x = 0; x < this.size; x++) {\n\t\t\tfor(let y = 0; y < this.size; y++){\n\t\t\t\tthis.board[x][y].draw(ctx,width,height,this.size,x,y);\n\t\t\t}\n\t\t}\n\t}\n}","import { State, Direction, Conveyors, MemoryType } from \"./types\";\nimport { Base, Mover, Adder, Subtractor, MemoryAdder, MemorySubtractor, MemorySplitter, MemoryAssigner } from \"./objects/conveyors\";\nimport { getBlank } from \"./images/loader\";\n\nexport const inputHandler = (state: State) => {\n\tconst handleKeyboard = (c: KeyboardEvent) => {\n\t\tswitch(c.key){\n\t\t\tcase \"ArrowRight\":\n\t\t\t\tconsole.log(\"right\")\n\t\t\t\tstate.direction = Direction.Right;\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowDown\":\n\t\t\t\tconsole.log(\"down\")\n\t\t\t\tstate.direction = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowLeft\":\n\t\t\t\tconsole.log(\"left\")\n\t\t\t\tstate.direction = Direction.Left;\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowUp\":\n\t\t\t\tconsole.log(\"up\")\n\t\t\t\tstate.direction = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase \"Enter\":\n\t\t\t\tif(state.isRunning) state.reset();\n\t\t\t\telse state.start();\n\t\t\t\tbreak;\n\n\t\t}\n\t}\n\tdocument.onkeydown = handleKeyboard;\n\n\tconst handleButtonClick = (c: MouseEvent) => {\n\t\tconst button = (c.target as HTMLElement);\n\n\t\tswitch(button.id){\n\t\t\tcase \"base\":\n\t\t\t\tstate.selectedPiece = Conveyors.Base\n\t\t\t\tbreak;\n\t\t\tcase \"mover\":\n\t\t\t\tstate.selectedPiece = Conveyors.Mover\n\t\t\t\tbreak;\n\t\t\tcase \"adder\":\n\t\t\t\tstate.selectedPiece = Conveyors.Adder\n\t\t\t\tbreak;\n\t\t\tcase \"subtractor\":\n\t\t\t\tstate.selectedPiece = Conveyors.Subtractor\n\t\t\t\tbreak;\n\t\t\tcase \"memory\":\n\t\t\t\tstate.selectedPiece = Conveyors.MemoryAssigner\n\t\t\t\tbreak;\n\t\t\tcase \"memory_adder\":\n\t\t\t\tstate.selectedPiece = Conveyors.MemoryAdder\n\t\t\t\tbreak;\n\t\t\tcase \"memory_subtractor\":\n\t\t\t\tstate.selectedPiece = Conveyors.MemorySubtractor\n\t\t\t\tbreak;\n\t\t\tcase \"memory_splitter\":\n\t\t\t\tstate.selectedPiece = Conveyors.MemorySplitter\n\t\t\t\tbreak;\n\t\t\tcase \"memory_a\":\n\t\t\t\tstate.selectedMemory = MemoryType.A;\n\t\t\t\tbreak;\n\t\t\tcase \"memory_b\":\n\t\t\t\tstate.selectedMemory = MemoryType.B;\n\t\t\t\tbreak;\n\t\t\tcase \"memory_c\":\n\t\t\t\tstate.selectedMemory = MemoryType.C;\n\t\t\t\tbreak;\n\t\t\tcase \"start\":\n\t\t\t\tif(state.isRunning) state.reset();\n\t\t\t\telse state.start();\n\t\t\t\tbreak;\n\t\t\tcase \"next_level\":\n\t\t\t\tstate.nextLevel();\n\t\t\t\tbreak;\n\t\t\tcase \"prev_level\":\n\t\t\t\tstate.prevLevel();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// TODO: Investigate why images are loaded so often\n\t// TODO: Add click handler to this\n\t//(document.getElementById(\"base\") as HTMLImageElement).src = getBlank().src\n\n\tconst buttons: HTMLCollectionOf<Element> =\n\t\tdocument.getElementsByTagName(\"button\");\n\n\tArray.from(buttons).forEach((a: HTMLButtonElement) =>{\n\t\ta.onclick = handleButtonClick\n\t});\n\n\tconst handleBoardClick = (c: MouseEvent) => {\n\t\tif(state.isRunning) return;\n\t\tconst divisor = (c.target as HTMLElement).clientHeight/state.boardState.size;\n\t\tconst xclick = Math.floor(c.offsetX/divisor);\n\t\tconst yclick = Math.floor(c.offsetY/divisor);\n\n\t\tlet conv: Base;\n\n\t\tswitch(state.selectedPiece) {\n\t\t\tcase Conveyors.Base:\n\t\t\t\tconv = new Base(state.direction);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.Mover:\n\t\t\t\tconv = new Mover(state.direction);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.Adder:\n\t\t\t\tconv = new Adder(state.direction);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.Subtractor:\n\t\t\t\tconv = new Subtractor(state.direction);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.MemoryAssigner:\n\t\t\t\tconv = new MemoryAssigner(state.direction, state.selectedMemory, state.boardState.memory);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.MemoryAdder:\n\t\t\t\tconv = new MemoryAdder(state.direction, state.selectedMemory, state.boardState.memory);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.MemorySubtractor:\n\t\t\t\tconv = new MemorySubtractor(state.direction, state.selectedMemory, state.boardState.memory);\n\t\t\t\tbreak;\n\t\t\tcase Conveyors.MemorySplitter:\n\t\t\t\tconv = new MemorySplitter(state.direction, state.selectedMemory, state.boardState.memory);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tstate.boardState.board[xclick][yclick] = conv;\n\t\tstate.boardState.draw(state.context, state.canvas.width, state.canvas.height);\n\t}\n\n\tstate.canvas.onmousedown = handleBoardClick;\n}","import { Level } from \"./types\";\n\nconst level1: Level = {\n\tname: \"Get a move on\",\n\tdescription: \"Move the box from top to the bottom using the mover-conveyor\",\n\tinput: [1,2,5],\n\toutput: [1,2,5],\n\tsize: 3,\n}\n\nconst level2: Level = {\n\tname: \"Adding up\",\n\tdescription: \"Add one to each input using the adder-conveyor\",\n\tinput: [1, 5, -1],\n\toutput: [2, 6, 0],\n\tsize: 3,\n}\n\nconst level3: Level = {\n\tname: \"Take it away\",\n\tdescription: \"Subtract three from each input using the subtract-conveyor\",\n\tinput: [3, 8, 0],\n\toutput: [0, 5, -3],\n\tsize: 3,\n}\n\nconst level4: Level = {\n\tname: \"Null null null\",\n\tdescription: \"Turn the input into zeroes using the memory-conveyor\",\n\tinput: [3, 8, 0],\n\toutput: [0, 0, 0],\n\tsize: 5,\n}\n\nconst level5: Level = {\n\tname: \"Two and a half boxes\",\n\tdescription: \"Divide the input by two\",\n\tinput: [2, 6, -4],\n\toutput: [1, 3, -2],\n\tsize: 5,\n}\n\nconst level6: Level = {\n\tname: \"Two and a half boxes 2: Electric boogaloo\",\n\tdescription: \"Divide the input by two, round up for odd numbers\",\n\tinput: [2, 3, 7, -3, -4],\n\toutput: [1, 2, 4, -2, -2],\n\tsize: 7,\n}\n\nconst level7: Level = {\n\tname: \"Remember the last one\",\n\tdescription: \"Add the previous output to the input\",\n\tinput: [1, 1, 1],\n\toutput: [1, 2, 3],\n\tsize: 5,\n}\n\nconst levels: Level[] = [\n\tlevel1,\n\tlevel2,\n\tlevel3,\n\tlevel4,\n\tlevel5,\n\tlevel6,\n\tlevel7,\n]\n\nexport default levels;","import { Conveyors, Direction, State, Level, MemoryType } from './types';\nimport { BoxHandler } from './objects/boxes';\nimport { Board } from './objects/board';\nimport { inputHandler } from './input';\nimport levels from './levels';\nimport { getBlank } from './images/loader'\n\nclass StateClass implements State{\n\tselectedPiece: Conveyors = Conveyors.Mover;\n\tselectedMemory: MemoryType = MemoryType.A;\n\tdirection: Direction = Direction.Down;\n\tboardState: Board;\n\tlevelIndex: number = 0;\n\tlevel: Level;\n\tcanvas: HTMLCanvasElement;\n\tcontext: CanvasRenderingContext2D;\n\tboxHandler: BoxHandler;\n\tisRunning: boolean = false;\n\tinterval: number;\n\t\n\tconstructor() {\n\t\tthis.canvas = document.getElementById('canvas') as HTMLCanvasElement;\n\n\t\tthis.context = this.canvas.getContext('2d')\n\n\t\tthis.boxHandler = new BoxHandler();\n\n\t\tthis.setLevel();\n\n\t\tgetBlank().onload = () => {\n\t\t\tthis.draw()\n\t\t}\n\n\t\tinputHandler(this);\n\t}\n\n\tnextLevel = () => {\n\t\tif(this.isRunning) return;\n\t\tthis.levelIndex = this.levelIndex < levels.length-1? this.levelIndex+1:this.levelIndex;\n\t\tthis.setLevel();\n\t}\n\n\tprevLevel = () => {\n\t\tif(this.isRunning) return;\n\t\tthis.levelIndex = this.levelIndex > 0? this.levelIndex-1:this.levelIndex;\n\t\tthis.setLevel();\n\t}\n\n\tsetLevel = () => {\n\t\tthis.level = levels[this.levelIndex];\n\t\tthis.boardState = new Board(this.level.size);\n\n\t\tconst canvasSize = this.level.size * 128;\n\t\tthis.canvas.height = canvasSize;\n\t\tthis.canvas.width = canvasSize;\n\n\t\tthis.draw();\n\n\t\tdocument.getElementById(\"level_name\").innerHTML = this.level.name;\n\t\tdocument.getElementById(\"level_name\").style.color = \"black\";\n\t\tdocument.getElementById(\"level_description\").innerHTML = this.level.description;\n\t\tdocument.getElementById(\"input\").innerHTML = \"Input: \" + this.level.input.toString();\n\t\tdocument.getElementById(\"output\").innerHTML = \"Output: \" + this.level.output.toString();\n\t}\n\n\tupdate = () => {\n\t\tthis.boxHandler.update(this.level, this.boardState, this.reset);\n\t}\n\n\tdraw = () => {\n\t\tthis.context.fillStyle = \"#eeeeee\";\n\t\tthis.context.fillRect(0,0,this.canvas.width, this.canvas.height)\n\t\tthis.boardState.draw(this.context, this.canvas.width, this.canvas.height);\n\t\tthis.boxHandler.draw(this.context, this.canvas.width, this.canvas.height, this.boardState.size);\n\t}\n\n\tstart = () =>{\n\t\tdocument.getElementById(\"level_name\").style.color = \"black\";\n\t\tconst button = document.getElementById(\"start\");\n\t\tbutton.innerHTML = \"Stop\";\n\n\t\tthis.isRunning = true;\n\t\tthis.update();\n\t\tthis.draw();\n\n\t\tthis.interval = setInterval(() => {\n\t\t\tthis.update();\n\t\t\tthis.draw();\n\t\t}, 300);\n\t}\n\n\treset = (won: boolean = false) => {\n\t\tconst button = document.getElementById(\"start\");\n\t\tbutton.innerHTML = \"Start\";\n\n\t\tthis.boxHandler.reset(won);\n\n\t\tclearInterval(this.interval);\n\t\tthis.isRunning = false;\n\n\t\tthis.boardState.memory.A = 0;\n\t\tthis.boardState.memory.B = 0;\n\t\tthis.boardState.memory.C = 0;\n\n\t\tthis.draw();\n\t}\n}\n\nconst state = new StateClass();\n\nexport default state;\n","import state from './state';\nimport images from './images/loader';\n\nconst setSize = () => {\n\tconst grid = document.getElementById('grid');\n\tconst width = grid.parentElement.clientWidth;\n\tconst height = grid.parentElement.clientHeight;\n\tconst size = width > height ? height : width;\n\tgrid.style.height = size + \"px\";\n\tgrid.style.width = size*1.5 + \"px\";\n}\n\nwindow.onload = setSize;\nwindow.onresize = setSize;\n\nimages;\nstate;"]}